<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Very</title>
  
  <subtitle>personal blog</subtitle>
  <link href="/myblog/atom.xml" rel="self"/>
  
  <link href="https://chanwillian.github.io/"/>
  <updated>2021-05-29T01:29:11.660Z</updated>
  <id>https://chanwillian.github.io/</id>
  
  <author>
    <name>Chan Willian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>demo2</title>
    <link href="https://chanwillian.github.io/2021/05/29/demo2/"/>
    <id>https://chanwillian.github.io/2021/05/29/demo2/</id>
    <published>2021-05-29T01:29:11.000Z</published>
    <updated>2021-05-29T01:29:11.660Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>demo1</title>
    <link href="https://chanwillian.github.io/2021/05/29/demo1/"/>
    <id>https://chanwillian.github.io/2021/05/29/demo1/</id>
    <published>2021-05-29T00:37:22.000Z</published>
    <updated>2021-05-29T00:37:22.501Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>List-15_Redis</title>
    <link href="https://chanwillian.github.io/2021/05/13/JavaWeb/List-15-Redis/"/>
    <id>https://chanwillian.github.io/2021/05/13/JavaWeb/List-15-Redis/</id>
    <published>2021-05-13T01:04:49.000Z</published>
    <updated>2021-05-26T13:19:05.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>redis<ul><li>概念</li><li>下载安装</li><li>命令操作</li></ul></li><li>数据结构</li><li>持久化操作</li><li>使用Java客户端操作redis</li></ul><h2 id="0-1-NOSQL"><a href="#0-1-NOSQL" class="headerlink" title="0.1 NOSQL"></a>0.1 NOSQL</h2><blockquote><h4 id="什么是NOSQL"><a href="#什么是NOSQL" class="headerlink" title="什么是NOSQL"></a>什么是NOSQL</h4></blockquote><ul><li>NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</li><li>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0</li><li>纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。</li><li>NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，<strong>尤其是大数据应用难题</strong>。</li></ul><blockquote><h4 id="NOSQL和关系型数据库比较"><a href="#NOSQL和关系型数据库比较" class="headerlink" title="NOSQL和关系型数据库比较"></a>NOSQL和关系型数据库比较</h4></blockquote><ul><li><p><strong>优点</strong>：</p><ul><li>1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</li><li>2）<strong>查询速度</strong>：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不nosql数据库。</li><li>3）<strong>存储数据的格式</strong>：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。</li><li>4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</li></ul></li><li><p><strong>缺点</strong>：</p><ul><li>1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。</li><li>2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。</li><li>3）不提供关系型数据库对事务的处理。</li></ul></li></ul><h4 id="1）非关系型数据库的优势："><a href="#1）非关系型数据库的优势：" class="headerlink" title="1）非关系型数据库的优势："></a>1）非关系型数据库的优势：</h4><ul><li><p>性能NOSQL<strong>是基于键值对的</strong>，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，<strong>所以性能非常高</strong>。</p></li><li><p>可扩展性同样也是因为基于键值对，数据之间没有耦合性，<strong>所以非常容易水平扩展</strong>。</p></li></ul><h4 id="2）关系型数据库的优势："><a href="#2）关系型数据库的优势：" class="headerlink" title="2）关系型数据库的优势："></a>2）关系型数据库的优势：</h4><ul><li><p>复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</p></li><li><p>事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</p></li></ul><h4 id="3）总结"><a href="#3）总结" class="headerlink" title="3）总结"></a>3）总结</h4><ul><li>关系型数据库与NoSQL数据库<strong>并非对立而是互补的关系</strong>，</li><li><strong>即通常情况下使用关系型数据库</strong>，在适合使用NoSQL的时候使用NoSQL数据库，让NoSQL数据库对关系型数据库的不足进行弥补。</li><li>一般会将数据存储在关系型数据库中，在nosql<strong>数据库中备份存储关系型数据库的数据</strong></li></ul><h4 id="4）主流的NOSQL产品"><a href="#4）主流的NOSQL产品" class="headerlink" title="4）主流的NOSQL产品"></a>4）主流的NOSQL产品</h4><ul><li><p><strong>键值(Key-Value)存储数据库</strong></p><ul><li>相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB</li><li>典型应用： <strong>内容缓存，主要用于处理大量数据的高访问负载。</strong></li><li>数据模型： 一系列键值对<ul><li>优势： <strong>快速查询</strong></li><li>劣势： 存储的数据缺少结构化</li></ul></li></ul></li><li><p><strong>列存储数据库</strong></p><ul><li>相关产品：Cassandra, HBase, Riak</li><li>典型应用：<strong>分布式的文件系统</strong></li><li>数据模型：以列簇式存储，将同一列数据存在一起<ul><li>优势：<strong>查找速度快，可扩展性强</strong>，更容易进行分布式扩展</li><li>劣势：功能相对局限</li></ul></li></ul></li><li><p><strong>文档型数据库</strong></p><ul><li>相关产品：CouchDB、MongoDB<ul><li>典型应用：<strong>Web应用</strong>（与Key-Value类似，Value是结构化的）</li><li>数据模型： 一系列键值对<ul><li>优势：<strong>数据结构要求不严格</strong></li><li>劣势： 查询性能不高，而且缺乏统一的查询语法</li></ul></li></ul></li></ul></li><li><p>图形(Graph)数据库</p><ul><li>相关数据库：Neo4J、InfoGrid、Infinite Graph</li><li>典型应用：<strong>社交网络</strong></li><li>数据模型：图结构<ul><li>优势：<strong>利用图结构相关算法</strong>。</li><li>劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</li></ul></li></ul></li></ul><h2 id="0-2-Redis"><a href="#0-2-Redis" class="headerlink" title="0.2 Redis"></a>0.2 Redis</h2><blockquote><h4 id="什么是Redis"><a href="#什么是Redis" class="headerlink" title="什么是Redis"></a>什么是Redis</h4></blockquote><ul><li>Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s </li><li>且Redis<strong>通过提供多种键值数据类型来适应不同场景下的存储需求</strong>，</li><li>目前为止Redis支持的键值数据类型如下：<ul><li>字符串类型 string</li><li>哈希类型 hash</li><li>列表类型 list</li><li>集合类型 set</li><li>有序集合类型 sortedset</li></ul></li></ul><blockquote><h4 id="Redis的应用场景"><a href="#Redis的应用场景" class="headerlink" title="Redis的应用场景"></a>Redis的应用场景</h4></blockquote><ul><li>缓存（数据查询、短连接、新闻内容、商品内容等等）</li><li>聊天室的在线好友列表</li><li>任务队列。（秒杀、抢购、12306等等）</li><li>应用排行榜</li><li>网站访问统计</li><li>数据过期处理（可以精确到毫秒</li><li>分布式集群架构中的session分离</li></ul><h4 id="1）下载安装"><a href="#1）下载安装" class="headerlink" title="1）下载安装"></a>1）下载安装</h4><ul><li>官网：https//redis.io</li><li>中文网：https//<a href="http://www.redis.net.cn/" target="_blank" rel="noopener">www.redis.net.cn/</a></li><li><strong>解压直接可以使用</strong>：<ul><li>redis.windows.conf：配置文件</li><li>redis-cli.exe：redis的客户端</li><li>redis-server.exe：redis服务器端</li></ul></li></ul><h4 id="2）命令操作"><a href="#2）命令操作" class="headerlink" title="2）命令操作"></a>2）命令操作</h4><ul><li><p><strong>redis的数据结构：</strong></p><ul><li>redis存储的是：key,value格式的数据，其中<strong>key都是字符串</strong>，value有5种不同的数据结构</li><li>value的数据结构：<ul><li>字符串类型 string</li><li>哈希类型 hash ： map格式</li><li>列表类型 list ： linkedlist格式。支持重复元素</li><li>集合类型 set  ： 不允许重复元素</li><li>有序集合类型 sortedset：不允许重复元素，且元素有顺序</li></ul></li></ul></li><li><blockquote><h4 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 string"></a>字符串类型 string</h4></blockquote><ul><li>存储： set key value<ul><li>127.0.0.1：6379&gt; set username zhangsan</li><li>OK</li></ul></li><li>获取： get key<ul><li>127.0.0.1：6379&gt; get username</li><li>“zhangsan”</li></ul></li><li>删除： del key<ul><li>127.0.0.1：6379&gt; del age</li><li>(integer) 1</li></ul></li></ul></li><li><blockquote><h4 id="哈希类型-hash"><a href="#哈希类型-hash" class="headerlink" title="哈希类型 hash"></a>哈希类型 hash</h4></blockquote><ul><li>存储： hset key field value<ul><li>127.0.0.1：6379&gt; hset myhash username lisi</li><li>(integer) 1</li><li>127.0.0.1：6379&gt; hset myhash password 123</li><li>(integer) 1</li></ul></li><li>获取：<ul><li>hget key field： 获取指定的field对应的值<ul><li>127.0.0.1：6379&gt; hget myhash username</li><li>“lisi”</li></ul></li><li>hgetall key：获取所有的field和value<ul><li>127.0.0.1：6379&gt; hgetall myhash</li><li>1) “username”</li><li>2) “lisi”</li><li>3) “password”</li><li>4) “123”</li></ul></li></ul></li><li>删除： hdel key field<ul><li>127.0.0.1：6379&gt; hdel myhash username</li><li>(integer) 1</li></ul></li></ul></li><li><blockquote><h4 id="列表类型-list：-可以添加一个元素到列表的头部（左边）或者尾部（右边）"><a href="#列表类型-list：-可以添加一个元素到列表的头部（左边）或者尾部（右边）" class="headerlink" title="列表类型 list： 可以添加一个元素到列表的头部（左边）或者尾部（右边）"></a>列表类型 list： 可以添加一个元素到列表的头部（左边）或者尾部（右边）</h4></blockquote><ul><li>添加：<ul><li>lpush key value： 将元素加入列表</li><li>rpush key value：将元素加入列表右边</li><li>127.0.0.1：6379&gt; lpush myList a<br>(integer) 1<br>127.0.0.1：6379&gt; lpush myList b<br>(integer) 2<br>127.0.0.1：6379&gt; rpush myList c<br>(integer) 3</li></ul></li><li>获取：<ul><li>lrange key start end ：范围获取</li><li>127.0.0.1：6379&gt; lrange myList 0 -1<br>1) “b”<br>2) “a”<br>3) “c”</li></ul></li><li>删除：<ul><li>lpop key： 删除列表最左边的元素，并将元素返回</li><li>rpop key： 删除列表最右边的元素，并将元素返回</li></ul></li></ul></li><li><blockquote><h4 id="集合类型-set-：-不允许重复元素"><a href="#集合类型-set-：-不允许重复元素" class="headerlink" title="集合类型 set ： 不允许重复元素"></a>集合类型 set ： 不允许重复元素</h4></blockquote><ul><li>存储：sadd key value<ul><li>127.0.0.1：6379&gt; sadd myset a<br>(integer) 1<br>127.0.0.1：6379&gt; sadd myset a<br>(integer) 0</li></ul></li><li>获取：smembers key：获取set集合中所有元素<ul><li>127.0.0.1：6379&gt; smembers myset<br>1) “a”</li></ul></li><li>删除：srem key value：删除set集合中的某个元素<ul><li>127.0.0.1：6379&gt; srem myset a<br>(integer) 1</li></ul></li></ul></li><li><blockquote><h4 id="有序集合类型-sortedset："><a href="#有序集合类型-sortedset：" class="headerlink" title="有序集合类型 sortedset："></a>有序集合类型 sortedset：</h4></blockquote><ul><li><p>不允许重复元素，且元素有顺序.</p></li><li><p>每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排</p></li><li><p>存储：zadd key score value</p><ul><li>127.0.0.1:6379&gt; zadd mysort 60 zhangsan<br>(integer) 1<br>127.0.0.1:6379&gt; zadd mysort 50 lisi<br>(integer) 1<br>127.0.0.1:6379&gt; zadd mysort 80 wangwu<br>(integer) 1</li></ul></li><li><p>获取：zrange key start end [withscores]</p><ul><li><p>127.0.0.1:6379&gt; zrange mysort 0 -1<br>1) “lisi”<br>2) “zhangsan”<br>3) “wangwu”</p><p>127.0.0.1:6379&gt; zrange mysort 0 -1 withscores<br>1) “zhangsan”<br>2) “60”<br>3) “wangwu”<br>4) “80”<br>5) “lisi”<br>6) “500”</p></li></ul></li><li><p>删除：zrem key value</p><ul><li>127.0.0.1:6379&gt; zrem mysort lisi<br>(integer) 1</li></ul></li></ul></li><li><blockquote><h4 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h4></blockquote><ul><li>keys * ： 查询所有的键</li><li>type key ： 获取键对应的value的类型</li><li>del key：删除指定的key value</li></ul></li></ul><h2 id="0-3-持久化"><a href="#0-3-持久化" class="headerlink" title="0.3 持久化"></a>0.3 持久化</h2><ul><li>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失</li><li>我们可以将redis内存中的数据持久化保存到硬盘的文件</li></ul><h4 id="1）redis持久化机制："><a href="#1）redis持久化机制：" class="headerlink" title="1）redis持久化机制："></a>1）redis持久化机制：</h4><ul><li><blockquote><h4 id="RDB：默认方式"><a href="#RDB：默认方式" class="headerlink" title="RDB：默认方式"></a>RDB：默认方式</h4></blockquote><ul><li>不需要进行配置，默认就使用这种机制</li><li>在一定的间隔时间中，检测key的变化情况，然后持久化数据</li><li><strong>1、编辑redis.windwos.conf文件</strong><ul><li>after 900 sec (15 min) if at least 1 key changed<br>save 900 1<br>after 300 sec (5 min) if at least 10 keys changed<br>save 300 10<br>after 60 sec if at least 10000 keys changed<br>save 60 10000</li></ul></li><li><strong>2.重新启动redis服务器，并指定配置文件名称</strong><ul><li>D：\JavaWeb2018\day23_redis\资料\redis\windows-64\redis-2.8.9&gt;redis-server.exe redis.windows.conf</li></ul></li></ul></li><li><blockquote><h4 id="AOF：日志记录的方式"><a href="#AOF：日志记录的方式" class="headerlink" title="AOF：日志记录的方式"></a>AOF：日志记录的方式</h4></blockquote><ul><li><p>可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p></li><li><p>编辑redis.windwos.conf文件</p><ul><li><p>appendonly no（关闭aof） –&gt; appendonly yes （开启aof）</p><p>appendfsync always ： 每一次操作都进行持久化<br>appendfsync everysec ： 每隔一秒进行一次持久化<br>appendfsync no     ： 不进行持久化</p></li></ul></li></ul></li></ul><p>​    </p><pre><code>5. Java客户端 Jedis    * Jedis： 一款java操作redis数据库的工具.    * 使用步骤：        1. 下载jedis的jar包        2. 使用            //1. 获取连接            Jedis jedis = new Jedis(&quot;localhost&quot;,6379);               //2. 操作               jedis.set(&quot;username&quot;,&quot;zhangsan&quot;);            //3. 关闭连接            jedis.close();</code></pre><p>​        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* Jedis操作各种redis中的数据结构</span><br><span class="line">​1) 字符串类型 string</span><br><span class="line">​set</span><br><span class="line">​get</span><br><span class="line">​</span><br><span class="line">​ &#x2F;&#x2F;1. 获取连接</span><br><span class="line">​        Jedis jedis &#x3D; new Jedis();&#x2F;&#x2F;如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span><br><span class="line">​        &#x2F;&#x2F;2. 操作</span><br><span class="line">​        &#x2F;&#x2F;存储</span><br><span class="line">​        jedis.set(&quot;username&quot;,&quot;zhangsan&quot;);</span><br><span class="line">​        &#x2F;&#x2F;获取</span><br><span class="line">​        String username &#x3D; jedis.get(&quot;username&quot;);</span><br><span class="line">​        System.out.println(username);</span><br></pre></td></tr></table></figure><p>​        </p><pre><code>    //可以使用setex()方法存储可以指定过期时间的 key value    jedis.setex(&quot;activecode&quot;,20,&quot;hehe&quot;);//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对    //3. 关闭连接    jedis.close();2) 哈希类型 hash ： map格式      hset    hget    hgetAll    //1. 获取连接    Jedis jedis = new Jedis();//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口    //2. 操作    // 存储hash    jedis.hset(&quot;user&quot;,&quot;name&quot;,&quot;lisi&quot;);    jedis.hset(&quot;user&quot;,&quot;age&quot;,&quot;23&quot;);    jedis.hset(&quot;user&quot;,&quot;gender&quot;,&quot;female&quot;);    // 获取hash    String name = jedis.hget(&quot;user&quot;, &quot;name&quot;);    System.out.println(name);</code></pre><p>​        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F; 获取hash的所有map中的数据</span><br><span class="line">​        Map&lt;String, String&gt; user &#x3D; jedis.hgetAll(&quot;user&quot;);</span><br><span class="line">​</span><br><span class="line">​        &#x2F;&#x2F; keyset</span><br><span class="line">​        Set&lt;String&gt; keySet &#x3D; user.keySet();</span><br><span class="line">​        for (String key ： keySet) &#123;</span><br><span class="line">​            &#x2F;&#x2F;获取value</span><br><span class="line">​            String value &#x3D; user.get(key);</span><br><span class="line">​            System.out.println(key + &quot;：&quot; + value);</span><br><span class="line">​        &#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure><pre><code>    //3. 关闭连接    jedis.close();3) 列表类型 list ： linkedlist格式。支持重复元素    lpush / rpush    lpop / rpop    lrange start end ： 范围获取     //1. 获取连接    Jedis jedis = new Jedis();//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口    //2. 操作    // list 存储    jedis.lpush(&quot;mylist&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);//从左边存    jedis.rpush(&quot;mylist&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);//从右边存    // list 范围获取    List&lt;String&gt; mylist = jedis.lrange(&quot;mylist&quot;, 0, -1);    System.out.println(mylist);    // list 弹出    String element1 = jedis.lpop(&quot;mylist&quot;);//c    System.out.println(element1);    String element2 = jedis.rpop(&quot;mylist&quot;);//c    System.out.println(element2);    // list 范围获取    List&lt;String&gt; mylist2 = jedis.lrange(&quot;mylist&quot;, 0, -1);    System.out.println(mylist2);    //3. 关闭连接    jedis.close();4) 集合类型 set  ： 不允许重复元素    sadd    smembers：获取所有元素    //1. 获取连接    Jedis jedis = new Jedis();//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口    //2. 操作</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​        &#x2F;&#x2F; set 存储</span><br><span class="line">​        jedis.sadd(&quot;myset&quot;,&quot;java&quot;,&quot;php&quot;,&quot;c++&quot;);</span><br><span class="line">​</span><br><span class="line">​        &#x2F;&#x2F; set 获取</span><br><span class="line">​        Set&lt;String&gt; myset &#x3D; jedis.smembers(&quot;myset&quot;);</span><br><span class="line">​        System.out.println(myset);</span><br></pre></td></tr></table></figure><p>​        </p><pre><code>    //3. 关闭连接    jedis.close();5) 有序集合类型 sortedset：不允许重复元素，且元素有顺序    zadd    zrange    //1. 获取连接    Jedis jedis = new Jedis();//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口    //2. 操作    // sortedset 存储    jedis.zadd(&quot;mysortedset&quot;,3,&quot;亚瑟&quot;);    jedis.zadd(&quot;mysortedset&quot;,30,&quot;后裔&quot;);    jedis.zadd(&quot;mysortedset&quot;,55,&quot;孙悟空&quot;);    // sortedset 获取    Set&lt;String&gt; mysortedset = jedis.zrange(&quot;mysortedset&quot;, 0, -1);    System.out.println(mysortedset);</code></pre><p>​        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">        &#x2F;&#x2F;3. 关闭连接</span><br><span class="line">​        jedis.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line">​* jedis连接池： JedisPool</span><br><span class="line">​* 使用：</span><br><span class="line">​1. 创建JedisPool连接池对象</span><br><span class="line">​2. 调用方法 getResource()方法获取Jedis连接</span><br><span class="line">​&#x2F;&#x2F;0.创建一个配置对象</span><br><span class="line">​        JedisPoolConfig config &#x3D; new JedisPoolConfig();</span><br><span class="line">​        config.setMaxTotal(50);</span><br><span class="line">​        config.setMaxIdle(10);</span><br><span class="line">​</span><br><span class="line">​        &#x2F;&#x2F;1.创建Jedis连接池对象</span><br><span class="line">​        JedisPool jedisPool &#x3D; new JedisPool(config,&quot;localhost&quot;,6379);</span><br><span class="line">​</span><br></pre></td></tr></table></figure><pre><code>//2.获取连接Jedis jedis = jedisPool.getResource();//3. 使用jedis.set(&quot;hehe&quot;,&quot;heihei&quot;);</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​        &#x2F;&#x2F;4. 关闭 归还到连接池中</span><br><span class="line">​        jedis.close();</span><br><span class="line">​</span><br><span class="line">​* 连接池工具类</span><br><span class="line">​public class JedisPoolUtils &#123;</span><br></pre></td></tr></table></figure><p>​    </p><pre><code>    private static JedisPool jedisPool;    static{        //读取配置文件        InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream(&quot;jedis.properties&quot;);        //创建Properties对象        Properties pro = new Properties();        //关联文件        try {            pro.load(is);        } catch (IOException e) {            e.printStackTrace();        }        //获取数据，设置到JedisPoolConfig中        JedisPoolConfig config = new JedisPoolConfig();        config.setMaxTotal(Integer.parseInt(pro.getProperty(&quot;maxTotal&quot;)));        config.setMaxIdle(Integer.parseInt(pro.getProperty(&quot;maxIdle&quot;)));        //初始化JedisPool        jedisPool = new JedisPool(config,pro.getProperty(&quot;host&quot;),Integer.parseInt(pro.getProperty(&quot;port&quot;)));    }    /**     * 获取连接方法     */    public static Jedis getJedis(){        return jedisPool.getResource();    }}</code></pre><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><ul><li>案例需求：<ul><li>提供index.html页面，页面中有一个省份 下拉列表</li><li>当页面加载完成后 <strong>发送ajax请求</strong>，加载所有省份</li></ul></li><li>注意：使用redis<strong>缓存一些不经常发生变化的数据</strong>。<ul><li>数据库的数据一旦发生改变，则需要更新缓存。<ul><li>数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，<strong>再次存入</strong></li><li>在service<strong>对应的增删改方法中</strong>，将redis数据删除。</li></ul></li></ul></li></ul><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;redis&lt;ul&gt;
&lt;li&gt;概念&lt;/li&gt;
&lt;li&gt;下载安装&lt;/li&gt;
&lt;li&gt;命令操作&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://chanwillian.github.io/categories/JavaWeb/"/>
    
    
  </entry>
  
  <entry>
    <title>List-12_Ajax&amp;Json</title>
    <link href="https://chanwillian.github.io/2021/05/13/JavaWeb/List-14_Ajax&amp;Json/"/>
    <id>https://chanwillian.github.io/2021/05/13/JavaWeb/List-14_Ajax&amp;Json/</id>
    <published>2021-05-13T01:02:04.000Z</published>
    <updated>2021-05-26T13:15:49.155Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><ul><li>AJAX：</li><li>JSON</li></ul><h2 id="0-1-AJAX"><a href="#0-1-AJAX" class="headerlink" title="0.1 AJAX"></a>0.1 AJAX</h2><ul><li><p>概念： ASynchronous JavaScript And XML    <strong>异步的JavaScript 和 XML</strong></p></li><li><p><strong>异步和同步</strong>：客户端和服务器端相互通信的基础上</p><ul><li>客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</li><li>客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</li></ul></li><li><p><strong>Ajax</strong> <strong>是一种在无需重新加载整个网页的情况下</strong>，能够更新部分网页的技术。</p><ul><li>通过在后台与服务器进行少量数据交换，Ajax <strong>可以使网页实现异步更新</strong>。</li><li>这意味着可以在不重新加载整个网页的情况下，<strong>对网页的某部分进行更新</strong>。</li></ul></li><li><p>传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</p></li></ul><h4 id="1）提升用户的体验"><a href="#1）提升用户的体验" class="headerlink" title="1）提升用户的体验"></a>1）提升用户的体验</h4><ul><li><blockquote><h4 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h4></blockquote><ul><li><p>原生的JS实现方式（了解）</p></li><li><p>实现步骤：</p><ol><li>创建核心对象</li><li>建立连接</li><li>发送请求</li><li>接受并处理来自服务器的响应结果</li></ol></li><li><pre><code>//1.创建核心对象var xmlhttp;if (window.XMLHttpRequest){// code for IE7+, Firefox, Chrome, Opera, Safari    xmlhttp=new XMLHttpRequest();}else{// code for IE6, IE5    xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);}//2. 建立连接/*参数：1. 请求方式：GET、POST* get方式，请求参数在URL后边拼接。send方法为空参* post方式，请求参数在send方法中定义2. 请求的URL：3. 同步或异步请求：true（异步）或 false（同步）*/xmlhttp.open(&quot;GET&quot;,&quot;ajaxServlet?username=tom&quot;,true);//3.发送请求xmlhttp.send();//4.接受并处理来自服务器的响应结果//获取方式 ：xmlhttp.responseText//什么时候获取？当服务器响应成功后再获取//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。xmlhttp.onreadystatechange=function(){    //判断readyState就绪状态是否为4，判断status响应状态码是否为200    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)    {        //获取服务器的响应结果        var responseText = xmlhttp.responseText;        alert(responseText);    }}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 2）JQeury实现方式</span><br><span class="line"></span><br><span class="line">**1.&#96;$.ajax()&#96;**</span><br><span class="line"></span><br><span class="line">- 语法：**$.ajax(&#123;键值对&#125;);**</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;java</span><br><span class="line">   &#x2F;&#x2F;使用$.ajax()发送异步请求</span><br><span class="line">   $.ajax(&#123;</span><br><span class="line">       url：&quot;ajaxServlet1111&quot; , &#x2F;&#x2F; 请求路径</span><br><span class="line">       type：&quot;POST&quot; , &#x2F;&#x2F;请求方式</span><br><span class="line">       &#x2F;&#x2F;data： &quot;username&#x3D;jack&amp;age&#x3D;23&quot;,&#x2F;&#x2F;请求参数</span><br><span class="line">       data：&#123;&quot;username&quot;：&quot;jack&quot;,&quot;age&quot;：23&#125;,</span><br><span class="line">       success：function (data) &#123;</span><br><span class="line">           alert(data);</span><br><span class="line">       &#125;,&#x2F;&#x2F;响应成功后的回调函数</span><br><span class="line">       error：function () &#123;</span><br><span class="line">           alert(&quot;出错啦...&quot;)</span><br><span class="line">       &#125;,&#x2F;&#x2F;表示如果请求响应出现错误，会执行的回调函数</span><br><span class="line">   </span><br><span class="line">       dataType：&quot;text&quot;&#x2F;&#x2F;设置接受到的响应数据的格式</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><ol start="2"><li><strong><code>$.get()</code></strong>：发送get请求<ul><li>语法：$.get(url, [data], [callback], [type])</li><li>参数：<ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型</li></ul></li></ul></li></ol><p>  3<strong>.<code>$.post()</code></strong>：发送post请求</p><ul><li>语法：$.post(url, [data], [callback], [type])</li><li>参数：<ul><li>url：请求路径</li><li>data：请求参数</li><li>callback：回调函数</li><li>type：响应结果的类型</li></ul></li></ul><h2 id="0-2-JSON"><a href="#0-2-JSON" class="headerlink" title="0.2 JSON"></a>0.2 JSON</h2><ul><li><p>概念： JavaScript Object Notation        <strong>JavaScript对象表示法</strong></p><ul><li><pre><code class="javascript">Person p = <span class="keyword">new</span> Person();p.setName(<span class="string">"张三"</span>);p.setAge(<span class="number">23</span>);p.setGender(<span class="string">"男"</span>);<span class="keyword">var</span> p = {<span class="string">"name"</span>：<span class="string">"张三"</span>,<span class="string">"age"</span>：<span class="number">23</span>,<span class="string">"gender"</span>：<span class="string">"男"</span>};&lt;!--￼<span class="number">1</span>--&gt;        <span class="comment">//1.定义基本格式</span>​                <span class="keyword">var</span> person = {<span class="string">"name"</span>： <span class="string">"张三"</span>, age： <span class="number">23</span>, <span class="string">'gender'</span>： <span class="literal">true</span>};​                 <span class="keyword">var</span> ps = [{<span class="string">"name"</span>： <span class="string">"张三"</span>, <span class="string">"age"</span>： <span class="number">23</span>, <span class="string">"gender"</span>： <span class="literal">true</span>},​                {<span class="string">"name"</span>： <span class="string">"李四"</span>, <span class="string">"age"</span>： <span class="number">24</span>, <span class="string">"gender"</span>： <span class="literal">true</span>},​                {<span class="string">"name"</span>： <span class="string">"王五"</span>, <span class="string">"age"</span>： <span class="number">25</span>, <span class="string">"gender"</span>： <span class="literal">false</span>}];</code></pre></li></ul></li></ul><p>​                    //获取person对象中所有的键和值<br>​                    //for in 循环<br>​                   /* for(var key in person){<br>​                        //这样的方式获取不行。因为相当于  person.”name”<br>​                        //alert(key + “：” + person.key);<br>​                        alert(key+”：”+person[key]);<br>​                    }*/<br>​<br>​                   //获取ps中的所有值<br>​                    for (var i = 0; i &lt; ps.length; i++) {<br>​                        var p = ps[i];<br>​                        for(var key in p){<br>​                            alert(key+”：”+p[key]);<br>​                        }<br>​                    }</p><pre><code>#### 2）JSON数据和Java对象的相互转换* JSON解析器：  * 常见的解析器：Jsonlib，Gson，fastjson，jackson* &gt; #### JSON转为Java对象  1. 导入jackson的相关jar包  2. 创建Jackson核心对象 ObjectMapper  3. 调用ObjectMapper**的相关方法进行转换**  4. readValue(json字符串数据,Class)* &gt; #### Java对象转换JSON  1. 导入jackson的相关jar包  2. 创建Jackson核心对象 ObjectMapper  3. 调用ObjectMapper**的相关方法进行转换**     - **转换方法**：writeValue(**参数**1，obj)：       - 参数1：         - File：将obj对象转换为JSON字符串，并保存到指定的文件中         - Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中         - OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中         - writeValueAsString(obj)：将对象转为json字符串     - 注解：       - @JsonIgnore：排除属性。       - @JsonFormat：属性值得格式化       - @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)     - 复杂java对象转换       - List：数组       - Map：对象格式一致## 案例：* 校验用户名是否存在  1. 服务器响应的数据，在客户端使用时，要想当做json数据格式使用。  2. 有两种解决方案：    - **$.get(type)**：**将最后一个参数**type指定为&quot;json&quot;    - 在服务器端设置MIME类型      - response.setContentType(&quot;application/json;charset=utf-8&quot;);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AJAX：&lt;/li&gt;
&lt;li&gt;JSON&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;0-1-AJAX&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://chanwillian.github.io/categories/JavaWeb/"/>
    
    
  </entry>
  
  <entry>
    <title>Edge使用教程</title>
    <link href="https://chanwillian.github.io/2021/05/10/Others/Edge%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://chanwillian.github.io/2021/05/10/Others/Edge%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-05-10T09:15:40.000Z</published>
    <updated>2021-05-10T09:21:09.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0-2-隐私，搜索和服务"><a href="#0-2-隐私，搜索和服务" class="headerlink" title="0.2 隐私，搜索和服务"></a>0.2 隐私，搜索和服务</h3><blockquote><h4 id="地址栏和搜索（页面最底部）"><a href="#地址栏和搜索（页面最底部）" class="headerlink" title="地址栏和搜索（页面最底部）"></a>地址栏和搜索（页面最底部）</h4></blockquote><p><strong>管理快捷搜索引擎</strong></p><ul><li>（页面最底部），例如百度  bd，知乎  zh</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0-2-隐私，搜索和服务&quot;&gt;&lt;a href=&quot;#0-2-隐私，搜索和服务&quot; class=&quot;headerlink&quot; title=&quot;0.2 隐私，搜索和服务&quot;&gt;&lt;/a&gt;0.2 隐私，搜索和服务&lt;/h3&gt;&lt;blockquote&gt;
&lt;h4 id=&quot;地址栏和搜索（页面最底部
      
    
    </summary>
    
    
    
      <category term="Edge" scheme="https://chanwillian.github.io/tags/Edge/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷键</title>
    <link href="https://chanwillian.github.io/2021/05/08/JAVA/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://chanwillian.github.io/2021/05/08/JAVA/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2021-05-08T07:40:30.000Z</published>
    <updated>2021-05-20T06:29:26.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-1-Ctrl-快捷键"><a href="#0-1-Ctrl-快捷键" class="headerlink" title="0.1 Ctrl 快捷键"></a>0.1 Ctrl 快捷键</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + F        //在当前文件进行文本查找 （必备）</span><br><span class="line">Ctrl + R        //在当前文件进行文本替换 （必备）</span><br><span class="line"></span><br><span class="line">Ctrl + Z        //撤销 （必备）</span><br><span class="line"></span><br><span class="line">Ctrl + Y        //删除光标所在行 或 删除选中的行 （必备）</span><br><span class="line">Ctrl + X        //剪切光标所在行 或 剪切选择内容</span><br><span class="line"></span><br><span class="line">Ctrl + C        //复制光标所在行 或 复制选择内容</span><br><span class="line">Ctrl + D        //复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 （必备）</span><br><span class="line"></span><br><span class="line">Ctrl + W        //递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围（必备）</span><br><span class="line"></span><br><span class="line">Ctrl + E        //显示最近打开的文件记录列表 （必备）</span><br><span class="line">Ctrl + N        //根据输入的 名/类名 查找类文件 （必备）</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + G        //在当前文件跳转到指定行处</span><br><span class="line"></span><br><span class="line">Ctrl + J        //插入自定义动态代码模板 （必备）</span><br><span class="line"></span><br><span class="line">Ctrl + P        //方法参数提示显示 （必备）</span><br><span class="line">Ctrl + Q        //光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</span><br><span class="line"></span><br><span class="line">Ctrl + U        //前往当前光标所在的方法的父类的方法 / 接口定义 （必备）</span><br><span class="line">Ctrl + B        //进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击 （必备）</span><br><span class="line"></span><br><span class="line">Ctrl + K        //版本控制提交项目，需要此项目有加入到版本控制才可用</span><br><span class="line">Ctrl + T        //版本控制更新项目，需要此项目有加入到版本控制才可用</span><br><span class="line"></span><br><span class="line">Ctrl + H        //显示当前类的层次结构</span><br><span class="line">Ctrl + O        //选择可重写的方法</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + I        //选择可继承的方法</span><br><span class="line"></span><br><span class="line">Ctrl + +        //展开代码</span><br><span class="line">Ctrl + -        //折叠代码</span><br><span class="line"></span><br><span class="line">Ctrl + /        //注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 （必备）</span><br><span class="line"></span><br><span class="line">Ctrl + [            //移动光标到当前所在代码的花括号开始位置</span><br><span class="line">Ctrl + ]            //移动光标到当前所在代码的花括号结束位置</span><br><span class="line"></span><br><span class="line">Ctrl + F1           //在光标所在的错误代码处显示错误信息 （必备）</span><br><span class="line">Ctrl + F3           //调转到所选中的词的下一个引用位置 （必备）</span><br><span class="line"></span><br><span class="line">Ctrl + F4           //关闭当前编辑文件</span><br><span class="line">Ctrl + F8           //在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + F9           //执行 Make Project 操作</span><br><span class="line"></span><br><span class="line">Ctrl + F11          //选中文件 / 文件夹，使用助记符设定 / 取消书签 （必备）</span><br><span class="line">Ctrl + F12          //弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</span><br><span class="line"></span><br><span class="line">Ctrl + Tab          //编辑窗口切换，如果在切换的过程又加按上 delete，则是关闭对应选中的窗口</span><br><span class="line">Ctrl + End          //跳到文件尾</span><br><span class="line">Ctrl + Home         //跳到文件头</span><br><span class="line"></span><br><span class="line">Ctrl + Space        //基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 Ctrl +逗号 （必备）</span><br><span class="line"></span><br><span class="line">Ctrl + Delete       //删除光标后面的单词或是中文句 （必备）</span><br><span class="line">Ctrl +BackSpace     //删除光标前面的单词或是中文句 （必备）</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Ctrl +<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>…<span class="number">9</span>       //定位到对应数值的书签位置 （必备）</span><br><span class="line"></span><br><span class="line">Ctrl + 左键单击     //在打开的文件标题上，弹出该文件路径 （必备）</span><br><span class="line">Ctrl + 光标定位按    //Ctrl 不要松开，会显示光标所在的类信息摘要</span><br><span class="line"></span><br><span class="line">Ctrl + 左方向键     //光标跳转到当前单词 / 中文句的左侧开头位置 （必备）</span><br><span class="line">Ctrl + 右方向键     //光标跳转到当前单词 / 中文句的右侧开头位置 （必备）</span><br><span class="line"></span><br><span class="line">Ctrl + 前方向键     //等效于鼠标滚轮向前效果 （必备）</span><br><span class="line">Ctrl + 后方向键     //等效于鼠标滚轮向后效果 （必备）</span><br></pre></td></tr></table></figure><h2 id="0-2-Alt快捷键"><a href="#0-2-Alt快捷键" class="headerlink" title="0.2 Alt快捷键"></a>0.2 Alt快捷键</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Alt + `             //显示版本控制常用操作菜单弹出层 （必备）</span><br><span class="line">Alt + Q             //弹出一个提示，显示当前类的声明 / 上下文信息</span><br><span class="line"></span><br><span class="line">Alt + F1            //显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择 （必备）</span><br><span class="line">Alt + F2            //对于前面页面，显示各类浏览器打开目标选择弹出层</span><br><span class="line"></span><br><span class="line">Alt + F3            //选中文本，逐个往下查找相同文本，并高亮显示</span><br><span class="line">Alt + F7            //查找光标所在的方法 / 变量 / 类被调用的地方</span><br><span class="line"></span><br><span class="line">Alt + F8            //在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</span><br><span class="line">Alt + Home          //定位 / 显示到当前文件的 Navigation Bar</span><br><span class="line"></span><br><span class="line">Alt + Enter         //IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 （必备）</span><br><span class="line">Alt + Insert        //代码自动生成，如生成对象的 <span class="built_in">set</span> / get 方法，构造函数，toString() 等 （必备）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Alt + 左方向键              切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备）</span><br><span class="line">Alt + 右方向键              按切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换 （必备）</span><br><span class="line"></span><br><span class="line">Alt + 前方向键              当前光标跳转到当前文件的前一个方法名位置 （必备）</span><br><span class="line">Alt + 后方向键              当前光标跳转到当前文件的后一个方法名位置 （必备）</span><br><span class="line"></span><br><span class="line">Alt +1,2,3…9                显示对应数值的选项卡，其中 1 是 Project 用得最多 （必备）</span><br></pre></td></tr></table></figure><h2 id="0-3-Shift-快捷键"><a href="#0-3-Shift-快捷键" class="headerlink" title="0.3  Shift 快捷键"></a>0.3  Shift 快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Shift + F1              如果有外部文档可以连接外部文档</span><br><span class="line">Shift + F2              跳转到上一个高亮错误 或 警告位置</span><br><span class="line">Shift + F3              在查找模式下，查找匹配上一个</span><br><span class="line">Shift + F4              对当前打开的文件，使用新 Windows 窗口打开，旧窗口保留</span><br><span class="line">Shift + F6              对文件 &#x2F; 文件夹 重命名</span><br><span class="line">Shift + F7              在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</span><br><span class="line">Shift + F8              在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</span><br><span class="line">Shift + F9              等效于点击工具栏的 Debug 按钮</span><br><span class="line">Shift + F10             等效于点击工具栏的 Run 按钮</span><br><span class="line">Shift + F11             弹出书签显示层 （必备）</span><br><span class="line">Shift + Tab             取消缩进 （必备）</span><br><span class="line">Shift + ESC             隐藏当前 或 最后一个激活的工具窗口</span><br><span class="line">Shift + End             选中光标到当前行尾位置</span><br><span class="line">Shift + Home            选中光标到当前行头位置</span><br><span class="line">Shift + Enter           开始新一行。光标所在行下空出一行，光标定位到新行位置 （必备）</span><br><span class="line">Shift + 左键单击            在打开的文件名上按此快捷键，可以关闭当前打开文件 （必备）</span><br><span class="line">Shift + 滚轮前后滚动      当前文件的横向滚动轴滚动 （必备）</span><br></pre></td></tr></table></figure><h2 id="0-4-Ctrl-Alt-快捷键"><a href="#0-4-Ctrl-Alt-快捷键" class="headerlink" title="0.4  Ctrl + Alt 快捷键"></a>0.4  Ctrl + Alt 快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt + L              格式化代码，可以对当前文件和整个包目录使用 （必备）</span><br><span class="line">Ctrl + Alt + O              优化导入的类，可以对当前文件和整个包目录使用 （必备）</span><br><span class="line">Ctrl + Alt + I              光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</span><br><span class="line">Ctrl + Alt + T              对选中的代码弹出环绕选项弹出层 （必备）</span><br><span class="line">Ctrl + Alt + J              弹出模板选择窗口，将选定的代码加入动态模板中</span><br><span class="line">Ctrl + Alt + H              调用层次</span><br><span class="line">Ctrl + Alt + B              在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</span><br><span class="line">Ctrl + Alt + V              快速引进变量</span><br><span class="line">Ctrl + Alt + Y              同步、刷新</span><br><span class="line">Ctrl + Alt + S              打开 IntelliJ IDEA 系统设置 （必备）</span><br><span class="line">Ctrl + Alt + F7             显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Alt + F11                切换全屏模式</span><br><span class="line">Ctrl + Alt + Enter              光标所在行上空出一行，光标定位到新行 （必备）</span><br><span class="line">Ctrl + Alt + Home               弹出跟当前文件有关联的文件弹出层</span><br><span class="line">Ctrl + Alt + Space              类名自动完成</span><br><span class="line">Ctrl + Alt + 左方向键           退回到上一个操作的地方 （必备）</span><br><span class="line">Ctrl + Alt + 右方向键           前进到上一个操作的地方 （必备）</span><br><span class="line">Ctrl + Alt + 前方向键           在查找模式下，跳到上个查找的文件</span><br><span class="line">Ctrl + Alt + 后方向键           在查找模式下，跳到下个查找的文件</span><br></pre></td></tr></table></figure><h2 id="0-5-Ctrl-Shift-快捷键"><a href="#0-5-Ctrl-Shift-快捷键" class="headerlink" title="0.5  Ctrl + Shift 快捷键"></a>0.5  Ctrl + Shift 快捷键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + F 根据输入内容查找整个项目 或 指定目录内文件 （必备）</span><br><span class="line">Ctrl + Shift + R 根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 （必备）</span><br><span class="line">Ctrl + Shift + J 自动将下一行合并到当前行末尾 （必备）</span><br><span class="line">Ctrl + Shift + Z 取消撤销 （必备）</span><br><span class="line">Ctrl + Shift + W 递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 （必备）</span><br><span class="line">Ctrl + Shift + N 通过文件名定位 &#x2F; 打开文件 &#x2F; 目录，打开目录需要在输入的内容后面多加一个正斜杠 （必备）</span><br><span class="line">Ctrl + Shift + U 对选中的代码进行大 &#x2F; 小写轮流转换 （必备）</span><br><span class="line">Ctrl + Shift + T 对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择 （必备）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + C 复制当前文件磁盘路径到剪贴板 （必备）Ctrl + Shift + V 弹出缓存的最近拷贝的内容管理器弹出层Ctrl + Shift + E 显示最近修改的文件列表的弹出层Ctrl + Shift + H 显示方法层次结构Ctrl + Shift + B 跳转到类型声明处 （必备）Ctrl + Shift + I 快速查看光标所在的方法 或 类的定义Ctrl + Shift + A 查找动作 &#x2F; 设置Ctrl + Shift + &#x2F; 代码块注释 （必备）Ctrl + Shift + [ 选中从光标所在位置到它的顶部中括号位置 （必备）Ctrl + Shift + ] 选中从光标所在位置到它的底部中括号位置 （必备）Ctrl + Shift + + 展开所有代码 （必备）Ctrl + Shift + - 折叠所有代码 （必备）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + F7 高亮显示所有该选中文本，按 Esc 高亮消失 （必备）Ctrl + Shift + F8 在 Debug 模式下，指定断点进入条件Ctrl + Shift + F9 编译选中的文件 &#x2F; 包 &#x2F; ModuleCtrl + Shift + F12 编辑器最大化 （必备）Ctrl + Shift + Space 智能代码提示Ctrl + Shift + Enter 自动结束代码，行末自动添加分号 （必备）Ctrl + Shift +Backspace 退回到上次修改的地方 （必备）Ctrl + Shift +1,2,3…9 快速添加指定数值的书签 （必备）Ctrl + Shift + 左键单击 把光标放在某个类变量上，按此快捷键可以直接定位到该类中 （必备）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Shift + 左方向键 在代码文件上，光标跳转到当前单词 &#x2F; 中文句的左侧开头位置，同时选中该单词 &#x2F; 中文句（必备）Ctrl + Shift + 右方向键 在代码文件上，光标跳转到当前单词 &#x2F; 中文句的右侧开头位置，同时选中该单词 &#x2F; 中文句（必备）Ctrl + Shift + 前方向键 光标放在方法名上，将方法移动到上一个方法前面，调整方法排序 （必备）Ctrl + Shift + 后方向键 光标放在方法名上，将方法移动到下一个方法前面，调整方法排序 （必备）</span><br></pre></td></tr></table></figure><h2 id="0-6-Alt-Shift-快捷键"><a href="#0-6-Alt-Shift-快捷键" class="headerlink" title="0.6  Alt + Shift 快捷键"></a>0.6  Alt + Shift 快捷键</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alt + <span class="built_in">Shift</span> + N 选择 / 添加 task （必备）Alt + <span class="built_in">Shift</span> + F 显示添加到收藏夹弹出层 / 添加到收藏夹Alt + <span class="built_in">Shift</span> + C 查看最近操作项目的变化情况列表Alt + <span class="built_in">Shift</span> + I 查看项目当前文件Alt + <span class="built_in">Shift</span> + F7在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入Alt + <span class="built_in">Shift</span> + F9 弹出 Debug 的可选择菜单Alt + <span class="built_in">Shift</span> + F10 弹出 Run 的可选择菜单Alt + <span class="built_in">Shift</span> + 左键双击 选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句 （必备）Alt + <span class="built_in">Shift</span> + 前方向键 移动光标所在行向上移动 （必备）Alt + <span class="built_in">Shift</span> + 后方向键 移动光标所在行向下移动 （必备）</span><br></pre></td></tr></table></figure><h2 id="0-7-Ctrl-Shift-Alt-快捷键"><a href="#0-7-Ctrl-Shift-Alt-快捷键" class="headerlink" title="0.7  Ctrl + Shift + Alt 快捷键"></a>0.7  Ctrl + Shift + Alt 快捷键</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + <span class="built_in">Shift</span> + Alt + V     无格式黏贴 （必备）Ctrl + <span class="built_in">Shift</span> + Alt + N     前往指定的变量 / 方法Ctrl + <span class="built_in">Shift</span> + Alt + S     打开当前项目设置 （必备）Ctrl + <span class="built_in">Shift</span> + Alt + C     复制参考信息</span><br></pre></td></tr></table></figure><h2 id="0-8-其他快捷键"><a href="#0-8-其他快捷键" class="headerlink" title="0.8 其他快捷键"></a>0.8 其他快捷键</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">F2 跳转到下一个高亮错误 或 警告位置 （必备）</span><br><span class="line">F3 在查找模式下，定位到下一个匹配处</span><br><span class="line">F4 编辑源 （必备）</span><br><span class="line"></span><br><span class="line">F7 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</span><br><span class="line">F8 在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</span><br><span class="line"></span><br><span class="line">F9 在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</span><br><span class="line"></span><br><span class="line">F11 添加书签 （必备）</span><br><span class="line">F12 回到前一个工具窗口 （必备）</span><br><span class="line"></span><br><span class="line">Tab缩进 （必备）</span><br><span class="line">ESC 从工具窗口进入代码文件窗口 （必备）</span><br><span class="line"></span><br><span class="line">连按两次<span class="built_in">Shift</span> 弹出 Search Everywhere 弹出层</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0-1-Ctrl-快捷键&quot;&gt;&lt;a href=&quot;#0-1-Ctrl-快捷键&quot; class=&quot;headerlink&quot; title=&quot;0.1 Ctrl 快捷键&quot;&gt;&lt;/a&gt;0.1 Ctrl 快捷键&lt;/h2&gt;&lt;figure class=&quot;highlight cmd&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="JAVA_IDEA" scheme="https://chanwillian.github.io/categories/JAVA-IDEA/"/>
    
    
  </entry>
  
  <entry>
    <title>手机热点无法使用</title>
    <link href="https://chanwillian.github.io/2021/05/06/Others/%E6%89%8B%E6%9C%BA%E7%83%AD%E7%82%B9%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://chanwillian.github.io/2021/05/06/Others/%E6%89%8B%E6%9C%BA%E7%83%AD%E7%82%B9%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-05-06T12:42:58.000Z</published>
    <updated>2021-05-06T12:43:12.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><ul><li><strong>热点的AP频段</strong> 可能选择的不合适        <strong>更换AP频段，热点能够正常使用</strong></li></ul><blockquote><p>发现，在学校的不同地点，需要不同的AP频段，才能正常使用我的手机热点</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;发现问题&quot;&gt;&lt;a href=&quot;#发现问题&quot; class=&quot;headerlink&quot; title=&quot;发现问题&quot;&gt;&lt;/a&gt;发现问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;热点的AP频段&lt;/strong&gt; 可能选择的不合适        &lt;strong&gt;更换AP频段，
      
    
    </summary>
    
    
    
      <category term="Others" scheme="https://chanwillian.github.io/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>ABBYY使用教程</title>
    <link href="https://chanwillian.github.io/2021/04/24/Others/ABBYY%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://chanwillian.github.io/2021/04/24/Others/ABBYY%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-04-24T07:42:16.000Z</published>
    <updated>2021-05-06T12:37:09.599Z</updated>
    
    <content type="html"><![CDATA[<h3 id="识别图片生成文字"><a href="#识别图片生成文字" class="headerlink" title="识别图片生成文字"></a>识别图片生成文字</h3><ul><li>使用<strong>FineReaderOCR</strong>  即可。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;识别图片生成文字&quot;&gt;&lt;a href=&quot;#识别图片生成文字&quot; class=&quot;headerlink&quot; title=&quot;识别图片生成文字&quot;&gt;&lt;/a&gt;识别图片生成文字&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;FineReaderOCR&lt;/strong&gt;  即可。&lt;/l
      
    
    </summary>
    
    
    
      <category term="Others" scheme="https://chanwillian.github.io/tags/Others/"/>
    
  </entry>
  
  <entry>
    <title>IDEA使用教程</title>
    <link href="https://chanwillian.github.io/2021/04/07/JavaWeb/IDEA%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://chanwillian.github.io/2021/04/07/JavaWeb/IDEA%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-04-07T09:13:37.000Z</published>
    <updated>2021-05-12T13:59:14.239Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-1-1-项目结构"><a href="#1-1-1-项目结构" class="headerlink" title="1.1.1  项目结构"></a>1.1.1  项目结构</h4><p><img src="https://i.loli.net/2021/04/07/U2zNqhSXBx6H3ys.png" alt="img"></p><h4 id="1-1-2-IDEA常用快捷键"><a href="#1-1-2-IDEA常用快捷键" class="headerlink" title="1.1.2  IDEA常用快捷键"></a>1.1.2  IDEA常用快捷键</h4><table><thead><tr><th><strong>快捷健</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>Alt+Enter</td><td>导入包，自动修正代码</td></tr><tr><td>Ctrl+Y</td><td>删除光标所在行</td></tr><tr><td>Ctrl+D</td><td>复制光标所在行的内容，插入光标位置下面</td></tr><tr><td>Ctrl+Alt+L</td><td>格式化代码</td></tr><tr><td>Ctrl+/</td><td>单行注释</td></tr><tr><td>Ctrl+Shift+/</td><td>选中代码注释，多行注释，再按取消注释</td></tr><tr><td>Alt+Ins</td><td>自动生成代码，toString, get, set等方法</td></tr><tr><td>Alt+Shift+上下箭头</td><td>移动当前代码行</td></tr></tbody></table><h4 id="1-1-3-IDEA修改快捷键"><a href="#1-1-3-IDEA修改快捷键" class="headerlink" title="1.1.3  IDEA修改快捷键"></a>1.1.3  IDEA修改快捷键</h4><p><img src="https://i.loli.net/2021/04/07/cF8XtsCZKJRyNfq.png" alt="img"></p><h4 id="1-1-4-模块的导入"><a href="#1-1-4-模块的导入" class="headerlink" title="1.1.4  模块的导入"></a>1.1.4  模块的导入</h4><p><img src="https://i.loli.net/2021/04/07/cF8XtsCZKJRyNfq.png" alt="img"></p><p><img src="https://i.loli.net/2021/04/07/cF8XtsCZKJRyNfq.png" alt="img"></p><ul><li>选中某个文件夹后，一路回车即可。</li></ul><h4 id="1-1-5-JavaBeen的快速创建"><a href="#1-1-5-JavaBeen的快速创建" class="headerlink" title="1.1.5  JavaBeen的快速创建"></a>1.1.5  JavaBeen的快速创建</h4><p><img src="https://i.loli.net/2021/04/07/EHLomjrMh3RcaYg.png" alt="img"></p><p><img src="https://i.loli.net/2021/04/07/EHLomjrMh3RcaYg.png" alt="img"></p><h4 id="1-1-6-快捷遍历输出"><a href="#1-1-6-快捷遍历输出" class="headerlink" title="1.1.6  快捷遍历输出"></a>1.1.6  快捷遍历输出</h4><p><img src="https://i.loli.net/2021/04/07/EHLomjrMh3RcaYg.png" alt="img"></p><h4 id="1-1-7-查看某个类的详细内容"><a href="#1-1-7-查看某个类的详细内容" class="headerlink" title="1.1.7  查看某个类的详细内容"></a>1.1.7  查看某个类的详细内容</h4><ul><li><strong>按住 Ctrl  ，然后 使用鼠标点击 某个类，即可。</strong></li></ul><h4 id="1-1-8-查看类文件的方法结构"><a href="#1-1-8-查看类文件的方法结构" class="headerlink" title="1.1.8  查看类文件的方法结构"></a>1.1.8  查看类文件的方法结构</h4><ul><li><strong>Alt + 7</strong> </li></ul><p><img src="https://i.loli.net/2021/04/07/XPjSFtrYTOU1a2z.png" alt="img"></p><h4 id="1-1-9-更改文件编码格式"><a href="#1-1-9-更改文件编码格式" class="headerlink" title="1.1.9    更改文件编码格式"></a>1.1.9    更改文件编码格式</h4><ul><li><img src="https://i.loli.net/2021/05/12/UotWKEFbNZgs5BI.png" alt="image-20210512215904101"></li></ul><h2 id="1-2-Tomcat"><a href="#1-2-Tomcat" class="headerlink" title="1.2 Tomcat"></a>1.2 Tomcat</h2><h4 id="1-2-1-Tomcat-项目的属性设置"><a href="#1-2-1-Tomcat-项目的属性设置" class="headerlink" title="1.2.1  Tomcat 项目的属性设置"></a>1.2.1  Tomcat 项目的属性设置</h4><p><img src="https://i.loli.net/2021/04/07/mVd9ZIkhaTcLDqU.png" alt="img"></p><p><img src="https://i.loli.net/2021/04/07/mVd9ZIkhaTcLDqU.png" alt="img"></p><h4 id="1-2-2-打开不同的Tomcat项目"><a href="#1-2-2-打开不同的Tomcat项目" class="headerlink" title="1.2.2  打开不同的Tomcat项目"></a>1.2.2  打开不同的Tomcat项目</h4><ol><li>打开另一个Tomcat项目，<strong>需要更改Tomcat的相关属性</strong></li><li><strong>选择你要使用的Tomcat项目</strong></li></ol><p><img src="https://i.loli.net/2021/04/07/mVd9ZIkhaTcLDqU.png" alt="img"></p><h4 id="1-2-3-编辑你的Tomcat项目"><a href="#1-2-3-编辑你的Tomcat项目" class="headerlink" title="1.2.3 编辑你的Tomcat项目"></a>1.2.3 编辑你的Tomcat项目</h4><ul><li><img src="https://i.loli.net/2021/04/07/mVd9ZIkhaTcLDqU.png" alt="img"></li></ul><h4 id="1-2-4-Tomcat项目对应的文件目录"><a href="#1-2-4-Tomcat项目对应的文件目录" class="headerlink" title="1.2.4  Tomcat项目对应的文件目录"></a>1.2.4  Tomcat项目对应的文件目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\JAVA_DEMO2\out\artifacts</span><br></pre></td></tr></table></figure><h4 id="1-2-5-添加jar包"><a href="#1-2-5-添加jar包" class="headerlink" title="1.2.5  添加jar包"></a><strong>1.2.5</strong>  添加jar包</h4><ol><li>导入jar包</li><li>添加到使用列表</li></ol><p><img src="https://i.loli.net/2021/04/07/mVd9ZIkhaTcLDqU.png" alt="img"></p><p><img src="https://i.loli.net/2021/04/07/mVd9ZIkhaTcLDqU.png" alt="img"></p><h4 id="1-2-6-更改Servlet模板"><a href="#1-2-6-更改Servlet模板" class="headerlink" title="1.2.6  更改Servlet模板"></a>1.2.6  更改Servlet模板</h4><img src="https://i.loli.net/2021/04/07/Eid5ZVFszmJN8tG.png" alt="img" style="zoom:80%;" /><h4 id="1-2-6-JSP工作文件夹"><a href="#1-2-6-JSP工作文件夹" class="headerlink" title="1.2.6   JSP工作文件夹"></a><strong>1.2.6</strong>   <strong>JSP工作文件夹</strong></h4><ul><li><code>D:\apache-tomcat-8.5.31\webapps\examples</code></li></ul><h4 id="1-2-7-更改Filter模板"><a href="#1-2-7-更改Filter模板" class="headerlink" title="1.2.7  更改Filter模板"></a>1.2.7  更改Filter模板</h4><ul><li>和更改Servlet模板大致相同</li></ul><h2 id="1-3-使用技巧"><a href="#1-3-使用技巧" class="headerlink" title="1.3 使用技巧"></a>1.3 使用技巧</h2><h4 id="1-3-1-添加代办TODO"><a href="#1-3-1-添加代办TODO" class="headerlink" title="1.3.1  添加代办TODO"></a>1.3.1  添加代办TODO</h4><ul><li><strong>在java代码中添加TODO，直接写注释即可。</strong></li></ul><p><img src="https://i.loli.net/2021/04/07/Ydrn9fb3GpNAk6S.png" alt="img"></p><ul><li><strong>在jsp代码中添加TODO，同样是写注释即可。</strong></li></ul><p><img src="https://i.loli.net/2021/04/07/Ydrn9fb3GpNAk6S.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-1-1-项目结构&quot;&gt;&lt;a href=&quot;#1-1-1-项目结构&quot; class=&quot;headerlink&quot; title=&quot;1.1.1  项目结构&quot;&gt;&lt;/a&gt;1.1.1  项目结构&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/04
      
    
    </summary>
    
    
    
      <category term="JAVA_IDEA使用技巧" scheme="https://chanwillian.github.io/tags/JAVA-IDEA%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>List-13_JQuery高级</title>
    <link href="https://chanwillian.github.io/2021/04/06/JavaWeb/JavaScript/List-13_JQuery%E9%AB%98%E7%BA%A7/"/>
    <id>https://chanwillian.github.io/2021/04/06/JavaWeb/JavaScript/List-13_JQuery%E9%AB%98%E7%BA%A7/</id>
    <published>2021-04-06T12:20:07.000Z</published>
    <updated>2021-05-13T00:31:37.597Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容："><a href="#今日内容：" class="headerlink" title="今日内容："></a>今日内容：</h3><ul><li>JQuery 高级<ul><li>动画</li><li>遍历</li><li>事件绑定</li></ul></li><li>案例</li><li>插件</li></ul><h2 id="0-1-JQuery-高级"><a href="#0-1-JQuery-高级" class="headerlink" title="0.1    JQuery 高级"></a>0.1    JQuery 高级</h2><h4 id="1）动画"><a href="#1）动画" class="headerlink" title="1）动画"></a>1）动画</h4><ul><li><p>三种方式显示和隐藏元素</p><blockquote><ol><li><h4 id="默认显示和隐藏方式"><a href="#默认显示和隐藏方式" class="headerlink" title="默认显示和隐藏方式"></a>默认显示和隐藏方式</h4></li></ol></blockquote><ul><li><p><strong>show</strong> ( [ speed,  [easing],  [fn]]  )</p><ol><li>参数：<ol><li><strong>speed</strong>：<strong>动画的速度</strong>。三个预定义的值(“slow”,”normal”, “fast”)或表示动画时长的毫秒数值(如：1000)</li><li><strong>easing</strong>：<strong>用来指定切换效果</strong>，默认是”swing”，可用参数”linear”<ul><li><strong>swing：动画执行时效果是 先慢，中间快，最后又慢</strong></li><li><strong>linear：动画执行时速度是匀速的</strong></li></ul></li><li><strong>fn</strong>：在动画完成时执行的函数，<strong>每个元素执行一次</strong>。</li></ol></li></ol></li><li><p>hide( [ speed,  [easing],  [fn]]  )</p></li><li><p>toggle( [ speed,  [easing],  [fn]]  )</p></li></ul></li><li><blockquote><h4 id="2-滑动显示和隐藏方式"><a href="#2-滑动显示和隐藏方式" class="headerlink" title="2.滑动显示和隐藏方式"></a>2.滑动显示和隐藏方式</h4></blockquote><ul><li><p><strong>slideDown</strong>([speed],[easing],[fn])</p></li><li><p><strong>slideUp</strong>([speed,[easing],[fn]])</p></li><li><p><strong>slideToggle</strong>([speed],[easing],[fn])</p></li></ul></li><li><blockquote><h4 id="3-淡入淡出显示和隐藏方式"><a href="#3-淡入淡出显示和隐藏方式" class="headerlink" title="3.淡入淡出显示和隐藏方式"></a>3.淡入淡出显示和隐藏方式</h4></blockquote><ul><li><strong>fadeIn</strong>([speed],[easing],[fn])<ul><li><strong>fadeOut</strong>([speed],[easing],[fn])</li><li><strong>fadeToggle</strong>([speed,[easing],[fn]])</li></ul></li></ul></li></ul><h4 id="2）遍历"><a href="#2）遍历" class="headerlink" title="2）遍历"></a>2）遍历</h4><ul><li><p>JS的遍历方式</p><ul><li>for(初始化值；循环结束条件；步长)</li></ul></li><li><blockquote><h4 id="JQ的遍历方式"><a href="#JQ的遍历方式" class="headerlink" title="JQ的遍历方式"></a>JQ的遍历方式</h4></blockquote><ul><li><p><strong>1、jq对象.each(callback)</strong></p><ul><li>语法：<code>jquery对象.each(function(index,element){</code><ul><li>​        <code>})；</code></li><li><strong>index：就是元素在集合中的索引</strong><ul><li><strong>element：就是集合中的每一个元素对象</strong></li><li><strong>this：集合中的每一个元素对象</strong></li></ul></li></ul></li><li><strong>回调函数返回值</strong>：<ul><li><strong>$.each(object, [callback])</strong><ul><li>true：如果当前function返回为false，则结束循环(break)。</li><li>false：如果当前function返回为true，则结束本次循环，继续下次循环(continue)</li></ul></li></ul></li></ul></li><li><p><strong>2、for..of</strong>： </p><ul><li><strong>for(元素对象 of 容器对象)</strong></li></ul></li></ul></li></ul><h4 id="3）事件绑定"><a href="#3）事件绑定" class="headerlink" title="3）事件绑定"></a>3）事件绑定</h4><ul><li><p><strong>jquery标准的绑定方式</strong></p><ul><li>jq对象.事件方法(回调函数)；</li><li>注：如果调用事件方法，不传递回调函数，<strong>则会触发浏览器默认行为</strong>。<ul><li>表单对象.submit()；    //让表单提交</li></ul></li></ul></li><li><p><strong>on绑定事件/off解除绑定</strong></p><ul><li>jq对象.on(“事件名称”,回调函数)</li><li>jq对象.off(“事件名称”)<ul><li>如果off方法不传递任何参数，<strong>则将组件上的所有事件全部解绑</strong></li></ul></li></ul></li><li><p><strong>事件切换：toggle</strong></p><ul><li><p>jq对象.toggle(fn1,fn2…)</p><ul><li>当单击jq对象对应的组件后，会执行<strong>fn1</strong>.<strong>第二次点击会执行</strong>fn2…..</li></ul></li><li><p>注意：<strong>1.9版本 .toggle() 方法删除</strong>，jQuery Migrate（迁移）插件可以恢复此功能。</p><ul><li><script src="../js/jquery-migrate-1.0.0.js" type="text/javascript" charset="utf-8"></script></li></ul></li></ul></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h4 id="广告的自动现实和隐藏"><a href="#广告的自动现实和隐藏" class="headerlink" title="广告的自动现实和隐藏"></a>广告的自动现实和隐藏</h4><ul><li><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><ul><li>当页面加载完，3秒后。自动显示广告动消失。</li></ul></li><li><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><ol><li>使用定时器来完成。setTimeout (执行一次定时器)</li><li>Query的显示和隐藏动画效果其实就是控制display</li><li>使用  show/hide方法来完成广告的显示</li></ol></li><li><p>代码实现</p><ul><li><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//入口函数，在页面加载完成之后，定义定时器，调用这两个方法</span></span><br><span class="line">    $(function () &#123;</span><br><span class="line">       <span class="comment">//定义定时器，调用adShow方法 3秒后执行一次</span></span><br><span class="line">       setTimeout(adShow,<span class="number">3000</span>)；</span><br><span class="line">       <span class="comment">//定义定时器，调用adHide方法，8秒后执行一次</span></span><br><span class="line">        setTimeout(adHide,<span class="number">8000</span>)；</span><br><span class="line">    &#125;)；</span><br><span class="line">    <span class="comment">//显示广告</span></span><br><span class="line">    <span class="function">function <span class="title">adShow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取广告div，调用显示方法</span></span><br><span class="line">        $(<span class="string">"#ad"</span>).show(<span class="string">"slow"</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//隐藏广告</span></span><br><span class="line">    <span class="function">function <span class="title">adHide</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取广告div，调用隐藏方法</span></span><br><span class="line">        $(<span class="string">"#ad"</span>).hide(<span class="string">"slow"</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="抽奖"><a href="#抽奖" class="headerlink" title="抽奖"></a>抽奖</h4><ul><li><h4 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h4><ol><li>给开始按钮绑定单击事件<ol><li>定义循环定时器<ul><li>切换小相框的src属性</li></ul></li><li>定义数组，存放图片资源路径<ul><li>生成随机数。数组索引        </li></ul></li></ol></li><li>给结束按钮绑定单击事件<ol><li>停止定时器</li><li>给大相框设置src属性</li></ol></li></ol></li><li><p><strong>disabled不能够使用</strong></p><ul><li><pre><code class="javascript">$(<span class="string">"#startID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">true</span>)；$(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="literal">false</span>)；&lt;!--￼<span class="number">1</span>--&gt;</code></pre></li></ul></li><li><p>代码实现</p></li><li><pre><code class="java">&lt;script language=<span class="string">'javascript'</span> type=<span class="string">'text/javascript'</span>&gt;    <span class="keyword">var</span> imgs = [<span class="string">"../img/man00.jpg"</span>,                <span class="string">"../img/man01.jpg"</span>,                <span class="string">"../img/man02.jpg"</span>,                <span class="string">"../img/man03.jpg"</span>,                <span class="string">"../img/man04.jpg"</span>,                <span class="string">"../img/man05.jpg"</span>,                <span class="string">"../img/man06.jpg"</span>,                ]；    <span class="keyword">var</span> startId；<span class="comment">//开始定时器的id</span>    <span class="keyword">var</span> index；<span class="comment">//随机角标</span>    $(function () {        <span class="comment">//处理按钮是否可以使用的效果</span>        $(<span class="string">"#startID"</span>).prop(<span class="string">"disabled"</span>,<span class="keyword">false</span>)；        $(<span class="string">"#stopID"</span>).prop(<span class="string">"disabled"</span>,<span class="keyword">true</span>)；</code></pre></li></ul><pre><code>       //1. 给开始按钮绑定单击事件        $(&quot;#startID&quot;).click(function () {            // 1.1 定义循环定时器 20毫秒执行一次            startId = setInterval(function () {                //处理按钮是否可以使用的效果                $(&quot;#startID&quot;).prop(&quot;disabled&quot;,true)；                $(&quot;#stopID&quot;).prop(&quot;disabled&quot;,false)；                //1.2生成随机角标 0-6                index = Math.floor(Math.random() * 7)；//0.000--0.999 --&gt; * 7 --&gt; 0.0-----6.9999                //1.3设置小相框的src属性                $(&quot;#img1ID&quot;).prop(&quot;src&quot;,imgs[index])；            },200)；        })；        //2. 给结束按钮绑定单击事件        $(&quot;#stopID&quot;).click(function () {            //处理按钮是否可以使用的效果            $(&quot;#startID&quot;).prop(&quot;disabled&quot;,false)；            $(&quot;#stopID&quot;).prop(&quot;disabled&quot;,true)；           // 1.1 停止定时器            clearInterval(startId)；           // 1.2 给大相框设置src属性            $(&quot;#img2ID&quot;).prop(&quot;src&quot;,imgs[index]).hide()；            //显示1秒之后            $(&quot;#img2ID&quot;).show(1000)；        })；    })；&lt;/script&gt;</code></pre><pre><code>## 0.2 插件：- 增强JQuery的功能- 实现方式：  - **$.fn.extend(object)**     - **增强**    通过Jquery获取的对象的功能  $(&quot;#id&quot;)  - **$.extend(object)**    - 增强JQeury对象自身的功能   $/jQuery</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容：&quot;&gt;&lt;a href=&quot;#今日内容：&quot; class=&quot;headerlink&quot; title=&quot;今日内容：&quot;&gt;&lt;/a&gt;今日内容：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JQuery 高级&lt;ul&gt;
&lt;li&gt;动画&lt;/li&gt;
&lt;li&gt;遍历&lt;/li&gt;
&lt;li&gt;事件绑定&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="JQ" scheme="https://chanwillian.github.io/categories/JQ/"/>
    
    
  </entry>
  
  <entry>
    <title>List-12_JQuery基础</title>
    <link href="https://chanwillian.github.io/2021/04/06/JavaWeb/JavaScript/List-12_JQuery%E5%9F%BA%E7%A1%80/"/>
    <id>https://chanwillian.github.io/2021/04/06/JavaWeb/JavaScript/List-12_JQuery%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-06T12:19:56.000Z</published>
    <updated>2021-05-13T00:50:38.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><ul><li>JQuery 基础：<ul><li>概念</li><li>快速入门</li></ul></li><li>JQuery对象和JS对象区别与转换</li><li>选择器</li><li>DOM操作</li><li>案例</li></ul><h2 id="0-1-JQuery-基础："><a href="#0-1-JQuery-基础：" class="headerlink" title="0.1    JQuery 基础："></a>0.1    JQuery 基础：</h2><p><strong>概念： 一个JavaScript框架。简化JS开发</strong></p><ul><li>jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。</li><li>jQuery设计的宗旨    是“write Less，Do More”，<strong>即倡导写更少的代码，做更多的事情。</strong></li><li>它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，<strong>优化HTML文档操作、事件处理、动画设计和Ajax交互。</strong></li><li>JavaScript框架：本质上就是一些js文件，封装了js的原生代码而已</li></ul><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ol><li><p>步骤：</p><ol><li><p>下载JQuery</p><ul><li>jquery-xxx.js 与 jquery-xxx.min.js区别：<ul><li>jquery-xxx.js：开发版本。给程序员看的，<strong>有良好的缩进和注释</strong>。体积大一些</li><li>jquery-xxx.min.js：生产版本。程序中使用，没有缩进。体积小一些。<strong>程序加载更快</strong></li></ul></li></ul></li></ol></li><li><p>导入JQuery的js文件：导入min.js文件</p></li><li><p><strong>使用</strong></p><ul><li><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div1 = $(<span class="string">"#div1"</span>);</span><br><span class="line"></span><br><span class="line">alert(div1.html( ));</span><br></pre></td></tr></table></figure></li></ul></li></ol><blockquote><h4 id="JQuery对象和JS对象区别与转换"><a href="#JQuery对象和JS对象区别与转换" class="headerlink" title="JQuery对象和JS对象区别与转换"></a>JQuery对象和JS对象区别与转换</h4></blockquote><ul><li>JQuery对象在操作时，<strong>更加方便</strong>。<ul><li>JQuery对象和js对象<strong>方法不通用的</strong>.</li><li>两者相互转换<ul><li>JQuery – &gt; JS ： <ul><li>JQ 对象[ 索引 ] </li><li>或者 JQ 对象.get( 索引)</li></ul></li><li>JS– &gt;JQuery：<strong>$(JS 对象)</strong></li></ul></li></ul></li></ul><h2 id="0-2-基本操作学习："><a href="#0-2-基本操作学习：" class="headerlink" title="0.2    基本操作学习："></a>0.2    基本操作学习：</h2><ul><li><p>事件绑定</p><ul><li><pre><code class="javascript"><span class="comment">//1.获取b1按钮</span>   $(<span class="string">"#b1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"> </span>)</span>{       alert(<span class="string">"abc"</span>);   });&lt;!--￼<span class="number">1</span>--&gt;</code></pre></li></ul></li></ul><h2 id="0-3-选择器"><a href="#0-3-选择器" class="headerlink" title="0.3    选择器"></a>0.3    选择器</h2><ul><li><strong>筛选具有相似特征的元素</strong>(标签)</li></ul><h4 id="1）选择器分类"><a href="#1）选择器分类" class="headerlink" title="1）选择器分类"></a>1）选择器分类</h4><blockquote><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4></blockquote><ol><li>标签选择器（元素选择器）<ul><li>语法： $(“html标签名”) 获得所有匹配标签名称的元素</li></ul></li><li><strong>id选择器</strong> <ul><li>语法： $(“#id的属性值”) 获得与指定id属性值匹配的元素</li></ul></li><li>类选择器<ul><li>语法： $(“.class的属性值”) 获得与指定的class属性值匹配的元素</li></ul></li><li>并集选择器：<ul><li>语法： $(“选择器1,选择器2….”) 获取多个选择器选中的所有元素</li></ul></li></ol><blockquote><h4 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a>层级选择器</h4></blockquote><ul><li>后代选择器<ul><li>语法： $(“A B “) 选择A元素内部的<strong>所有B元素</strong>        </li></ul></li><li>子选择器<ul><li>语法： $(“A &gt; B”) 选择A元素内部的<strong>所有B子元素</strong></li></ul></li></ul><blockquote><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4></blockquote><ol><li>属性名称选择器 <ul><li>语法： $(“A[属性名]”) 包含指定属性的选择器</li></ul></li><li>属性选择器<ul><li>语法： $(“A[属性名=’值’]”) 包含指定属性等于指定值的选择器</li></ul></li><li>复合属性选择器<ul><li>语法： $(“A[属性名=’值’][]…”) 包含多个属性条件的选择器</li></ul></li></ol><blockquote><h4 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h4></blockquote><ol><li>首元素选择器 <ul><li>语法： ：first 获得选择的元素中的第一个元素</li></ul></li><li>尾元素选择器 <ul><li>语法： ：last 获得选择的元素中的最后一个元素</li></ul></li><li>非元素选择器<ul><li>语法： ：not(selector) 不包括指定内容的元素</li></ul></li><li>偶数选择器<ul><li>语法： ：even 偶数，从 0 开始计数</li></ul></li><li>奇数选择器<ul><li>语法： ：odd 奇数，从 0 开始计数</li></ul></li><li>等于索引选择器<ul><li>语法： ：eq(index) 指定索引元素</li></ul></li><li>大于索引选择器 <ul><li>语法： ：gt(index) 大于指定索引元素</li></ul></li><li>小于索引选择器 <ul><li>语法： ：lt(index) 小于指定索引元素</li></ul></li><li>标题选择器<ul><li>语法： ：header 获得标题（h1~h6）元素，固定写法</li></ul></li></ol><blockquote><h4 id="表单过滤选择器"><a href="#表单过滤选择器" class="headerlink" title="表单过滤选择器"></a>表单过滤选择器</h4></blockquote><ol><li>可用元素选择器 <ul><li>语法： ：enabled 获得可用元素</li></ul></li><li>不可用元素选择器 <ul><li>语法： ：disabled 获得不可用元素</li></ul></li><li>选中选择器 <ul><li>语法： <strong>：checked</strong> 获得<strong>单选/复选框选中的元素</strong></li></ul></li><li>选中选择器 <ul><li>语法： <strong>：selected</strong> 获得<strong>下拉框选中的元素</strong></li></ul></li></ol><h2 id="0-4-DOM操作"><a href="#0-4-DOM操作" class="headerlink" title="0.4    DOM操作"></a>0.4    DOM操作</h2><h4 id="1）内容操作"><a href="#1）内容操作" class="headerlink" title="1）内容操作"></a>1）内容操作</h4><ol><li>html( )： 获取/设置元素的标签体内容   <a><font>内容</font></a>  –&gt; <font>内容</font></li><li>text( )： 获取/设置元素的标签体纯文本内容   <a><font>内容</font></a> –&gt; 内容</li><li>val( )： 获取/设置元素的value属性值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取myinput 的value值</span></span><br><span class="line"><span class="keyword">var</span> value = $(<span class="string">"#myInput"</span>).val( );</span><br><span class="line">alert(value);</span><br><span class="line">            $(<span class="string">"#myInput"</span>).val(<span class="string">"李四"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取mydiv的标签体内容</span></span><br><span class="line"><span class="keyword">var</span> html = $(<span class="string">"#myDiv"</span>).html( );</span><br><span class="line">alert(html);</span><br><span class="line">            $(<span class="string">"#myDiv"</span>).html(<span class="string">"&lt;p&gt;aaaa&lt;/p&gt;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取mydiv文本内容</span></span><br><span class="line">            <span class="keyword">var</span> text = $(<span class="string">"#myDiv"</span>).text( );</span><br><span class="line">            alert(text);</span><br><span class="line">            $(<span class="string">"#myDiv"</span>).text(<span class="string">"bbb"</span>);</span><br></pre></td></tr></table></figure><h4 id="2）属性操作"><a href="#2）属性操作" class="headerlink" title="2）属性操作"></a>2）属性操作</h4><ul><li><p><strong>通用属性操作</strong></p><ol><li><strong>attr</strong>( )： 获取/设置元素的属性</li><li>removeAttr( )：删除属性</li><li><strong>prop</strong>( )：获取/设置元素的属性</li><li>removeProp( )：删除属性</li><li>attr和prop<strong>区别</strong>？<ol start="6"><li>如果操作的是元素的<strong>固有属性，则建议使用prop</strong></li><li>如果操作的是元素<strong>自定义的属性，则建议使用attr</strong></li></ol></li></ol></li><li><p><strong>对class属性操作</strong></p><ol><li><strong>addClass</strong>( )：添加class属性值</li><li>removeClass( )：删除class属性值</li><li><strong>toggleClass</strong>( )：切换class属性<ul><li>toggleClass(“one”)： <ul><li>判断如果元素对象上存在class=”one”，则将属性值one删除掉。  如果元素对象上不存在    class=”one”，则添加</li></ul></li></ul></li><li><strong>css</strong>( )：</li></ol></li></ul><h4 id="3）CRUD操作："><a href="#3）CRUD操作：" class="headerlink" title="3）CRUD操作："></a>3）CRUD操作：</h4><ul><li><strong>append</strong>( )：父元素将子元素追加到末尾<ul><li>对象1.append(对象2)： 将对象2添加到对象1元素内部，并且在末尾</li></ul></li><li><strong>prepend</strong>( )：父元素将子元素追加到开头<ul><li>对象1.prepend(对象2)：将对象2添加到对象1元素内部，并且在开头</li></ul></li><li>appendTo( )：<ul><li>对象1.appendTo(对象2)：将对象1添加到对象2内部，并且在末尾</li></ul></li><li>prependTo( )：<ul><li>对象1.prependTo(对象2)：将对象1添加到对象2内部，并且在开头</li></ul></li><li>after( )：添加元素到元素后边<ul><li>对象1.after(对象2)： 将对象2添加到对象1后边。对象1和对象2是兄弟关系</li></ul></li><li>before( )：添加元素到元素前边<ul><li>对象1.before(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</li></ul></li><li>insertAfter( )<ul><li>对象1.insertAfter(对象2)：将对象2添加到对象1后边。对象1和对象2是兄弟关系</li></ul></li><li>insertBefore( )<ul><li>对象1.insertBefore(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</li></ul></li><li><strong>remove</strong>( )：移除元素<ul><li>对象.remove( )：将对象删除掉</li></ul></li><li><strong>empty</strong>( )：清空元素的所有后代元素。<ul><li>对象.empty( )：将对象的后代元素全部清空，但是保留当前对象以及其属性节点</li></ul></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h4 id="全选和全不选"><a href="#全选和全不选" class="headerlink" title="全选和全不选"></a>全选和全不选</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectAll</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取下边的复选框</span></span><br><span class="line">$(<span class="string">".itemSelect "</span>).prop(<span class="string">"checked"</span>,obj.checked);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下拉菜单，左右移动"><a href="#下拉菜单，左右移动" class="headerlink" title="下拉菜单，左右移动"></a>下拉菜单，左右移动</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"> </span>) </span>&#123;</span><br><span class="line">    <span class="comment">//toRight</span></span><br><span class="line">    $(<span class="string">"#toRight"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"> </span>) </span>&#123;</span><br><span class="line">        <span class="comment">//获取右边的下拉列表对象，append(左边下拉列表选中的option)</span></span><br><span class="line">        $(<span class="string">"#rightName"</span>).append($(<span class="string">"#leftName &gt; option:selected"</span>));</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//toLeft</span></span><br><span class="line">    $(<span class="string">"#toLeft"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"> </span>) </span>&#123;</span><br><span class="line">        <span class="comment">//appendTo   获取右边选中的option，将其移动到左边下拉列表中</span></span><br><span class="line">        $(<span class="string">"#rightName &gt; option:selected"</span>).appendTo($(<span class="string">"#leftName"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;JQuery 基础：&lt;ul&gt;
&lt;li&gt;概念&lt;/li&gt;
&lt;li&gt;快速入门&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="JQ" scheme="https://chanwillian.github.io/categories/JQ/"/>
    
    
  </entry>
  
  <entry>
    <title>List-08_Cookie_Session</title>
    <link href="https://chanwillian.github.io/2021/04/06/JavaWeb/List-08-Cookie-Session/"/>
    <id>https://chanwillian.github.io/2021/04/06/JavaWeb/List-08-Cookie-Session/</id>
    <published>2021-04-06T08:08:22.000Z</published>
    <updated>2021-04-06T08:08:58.791Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><ul><li>会话技术<ul><li>Cookie</li><li>Session</li></ul></li><li>JSP：入门学习</li></ul><h3 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h3><ol><li>会话：一次会话中包含多次请求和响应。<ul><li>一次会话：<strong>浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</strong></li></ul></li><li>功能：<strong>在一次会话的范围内的多次请求间</strong>，共享数据</li><li>方式：<ol><li><strong>客户端会话技术：Cookie</strong></li><li><strong>服务器端会话技术：Session</strong></li></ol></li></ol><h2 id="0-1-Cookie："><a href="#0-1-Cookie：" class="headerlink" title="0.1 Cookie："></a>0.1 Cookie：</h2><ul><li>概念：客户端会话技术，<strong>将数据保存到客户端</strong></li></ul><h4 id="1）快速入门："><a href="#1）快速入门：" class="headerlink" title="1）快速入门："></a>1）快速入门：</h4><ul><li><p>使用步骤：</p><ol><li><strong>创建Cookie对象，绑定数据</strong><ul><li>new Cookie(String name, String value) </li></ul></li><li><strong>发送Cookie对象</strong><ul><li>response.addCookie(Cookie cookie) </li></ul></li><li><strong>获取Cookie，拿到数据</strong><ul><li>Cookie[ ]  request.getCookies()  </li></ul></li></ol></li><li><p><strong>实现原理</strong></p><ul><li><strong>基于响应头set-cookie和请求头cookie实现</strong><ul><li><img src="https://i.loli.net/2021/01/24/AHTQi3X5kC6z1Rj.png" alt=""></li></ul></li></ul></li></ul><h4 id="2）cookie的细节"><a href="#2）cookie的细节" class="headerlink" title="2）cookie的细节"></a>2）cookie的细节</h4><blockquote><h4 id="一次可不可以发送多个cookie"><a href="#一次可不可以发送多个cookie" class="headerlink" title="一次可不可以发送多个cookie?"></a>一次可不可以发送多个cookie?</h4></blockquote><ul><li>可以<ul><li><strong>可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</strong></li></ul></li></ul><blockquote><h4 id="cookie在浏览器中保存多长时间？"><a href="#cookie在浏览器中保存多长时间？" class="headerlink" title="cookie在浏览器中保存多长时间？"></a>cookie在浏览器中保存多长时间？</h4></blockquote><ol><li><strong>默认情况下</strong>，当浏览器关闭后，Cookie数据被销毁</li><li><strong>持久化存储</strong>：<ul><li><strong>setMaxAge</strong>(int seconds)<ul><li>正数：将Cookie数据写到硬盘的文件中。<strong>持久化存储</strong>。并指定cookie存活时间，时间到后，cookie文件自动失效</li><li>负数：默认值</li><li>零：删除cookie信息</li></ul></li></ul></li></ol><blockquote><h4 id="cookie能不能存中文？"><a href="#cookie能不能存中文？" class="headerlink" title="cookie能不能存中文？"></a>cookie能不能存中文？</h4></blockquote><ul><li>在tomcat 8 之前 cookie<strong><strong>中不能直接存储中文数据</strong></strong>。<ul><li>需要将中文数据转码—一般采用URL编码(%E3)</li></ul></li><li>在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，<strong>建议使用URL编码存储，URL解码解析</strong></li></ul><blockquote><h4 id="cookie共享问题"><a href="#cookie共享问题" class="headerlink" title="cookie共享问题"></a>cookie共享问题</h4></blockquote><ul><li>假设在一个tomcat服务器中，部署了<strong>多个web项目</strong>，那么在这些web项目中cookie<strong>能不能共享</strong>？</li></ul><ul><li><strong>默认情况下cookie不能共享</strong><ul><li>setPath(String path)：设置cookie的获取范围。默认情况下，设置当前的虚拟目录</li><li>如果要共享，则可以将path设置为”/“</li></ul></li></ul><blockquote><h4 id="不同的tomcat服务器间cookie共享问题？"><a href="#不同的tomcat服务器间cookie共享问题？" class="headerlink" title="不同的tomcat服务器间cookie共享问题？"></a>不同的tomcat服务器间cookie共享问题？</h4></blockquote><ul><li><strong>setDomain</strong>(String path)：<strong>如果设置一级域名相同</strong>，那么多个服务器之间cookie可以共享<ul><li>例如，setDomain(“.baidu.com”)：那么tieba.baidu.com和news.baidu.com中cookie可以共享</li></ul></li></ul><h4 id="3）Cookie的特点和作用"><a href="#3）Cookie的特点和作用" class="headerlink" title="3）Cookie的特点和作用"></a>3）Cookie的特点和作用</h4><ul><li>特点：<ul><li>cookie<strong>存储数据在客户端浏览器</strong></li><li>浏览器对于单个cookie <strong>的大小有限制</strong>(4kb) 以及 <strong>对同一个域名下的总</strong>cookie<strong>数量也有限制</strong>(20个)</li></ul></li></ul><ul><li>作用：<ol><li>cookie<strong>一般用于存出少量的不太敏感的数据</strong></li><li><strong>在不登录的情况下，完成服务器对客户端的身份识别</strong></li></ol></li></ul><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><blockquote><h4 id="记住上一次访问时间"><a href="#记住上一次访问时间" class="headerlink" title="记住上一次访问时间"></a>记住上一次访问时间</h4></blockquote><ul><li>需求：<ol><li>访问一个Servlet，<strong>如果是第一次访问</strong>，则提示：您好，欢迎您首次访问。</li><li><strong>如果不是第一次访问</strong>，则提示：欢迎回来，您上次访问时间为:显示时间字符串</li></ol></li><li><img src="https://i.loli.net/2021/01/24/7CdY6MeqaAiryF9.png" alt=""></li></ul><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><ol><li>可以采用Cookie来完成</li><li><strong>在服务器中的Servlet判断是否有一个名为lastTime的cookie</strong><ol><li>有：不是第一次访问<ol><li>响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20</li><li>写回Cookie：lastTime=2018年6月10日11:50:01</li></ol></li><li>没有：是第一次访问<ol><li>响应数据：您好，欢迎您首次访问</li><li>写回Cookie：lastTime=2018年6月10日11:50:01</li></ol></li></ol></li></ol><h2 id="0-2-JSP入门学习"><a href="#0-2-JSP入门学习" class="headerlink" title="0.2 JSP入门学习"></a>0.2 JSP入门学习</h2><ul><li><p><strong>概念：</strong></p><ul><li>Java Server Pages： java服务器端页面</li><li>可以理解为：<strong>一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</strong></li><li><strong>用于简化书写！！！</strong></li></ul></li><li><p><strong>原理</strong></p><ul><li><strong>JSP本质上就是一个Servlet</strong></li><li><img src="https://i.loli.net/2021/01/24/dWTumt1sPGFDrIg.png" alt="JSP原理.png"></li></ul></li></ul><h4 id="1）JSP的脚本："><a href="#1）JSP的脚本：" class="headerlink" title="1）JSP的脚本："></a>1）JSP的脚本：</h4><ul><li><strong>JSP定义Java代码的方式</strong><ul><li><strong>&lt;%  代码 %&gt;</strong>：定义的java代码，在service方法中。<strong>可以在此处使用正常的java代码</strong></li><li><strong>&lt;%! 代码 %&gt;</strong>：定义的java代码，在jsp转换后的java类的成员位置。<strong>可以在此处成定义成员变量</strong></li><li><strong>&lt;%= 代码 %&gt;</strong>：定义的java代码，会输出到页面上。<strong>可以直接书写要输入的内容</strong></li></ul></li></ul><h4 id="2）JSP的内置对象："><a href="#2）JSP的内置对象：" class="headerlink" title="2）JSP的内置对象："></a>2）JSP的内置对象：</h4><ul><li>在jsp页面中<strong>不需要获取和创建，可以直接使用的对象</strong></li><li>jsp一共有9个内置对象。<ul><li>request</li><li>response</li><li>out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似</li></ul></li></ul><ul><li><strong>response.getWriter()和out.write()的区别：</strong><ul><li>在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</li><li>response.getWriter()数据输出永远<strong>在out.write()之前</strong></li></ul></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例:"></a>案例:</h2><h4 id="改造Cookie案例"><a href="#改造Cookie案例" class="headerlink" title="改造Cookie案例"></a>改造Cookie案例</h4><h2 id="0-3-Session"><a href="#0-3-Session" class="headerlink" title="0.3 Session"></a>0.3 Session</h2><ul><li>概念：服务器端会话技术，在一次会话的多次请求间共享数据，<strong>将数据保存在服务器端的对象中</strong>。<strong>HttpSession</strong></li></ul><h4 id="1）快速入门：-1"><a href="#1）快速入门：-1" class="headerlink" title="1）快速入门："></a>1）快速入门：</h4><ol><li><strong>获取HttpSession对象：</strong><ul><li>HttpSession session = <strong>request.getSession();</strong></li></ul></li><li><strong>使用HttpSession对象：</strong><ul><li>Object <strong>getAttribute</strong>(String name)  </li><li>void <strong>setAttribute</strong>(String name, Object value)</li><li>void <strong>removeAttribute</strong>(String name)  </li></ul></li></ol><ul><li><strong>原理</strong><ul><li><strong>Session的实现是依赖于Cookie的。</strong></li><li><img src="https://i.loli.net/2021/01/24/KVYW5xLmQChsjR4.png" alt=""></li></ul></li></ul><h4 id="2）细节："><a href="#2）细节：" class="headerlink" title="2）细节："></a>2）细节：</h4><blockquote><h4 id="当客户端关闭后，服务器不关闭，两次获取session是否为同一个？"><a href="#当客户端关闭后，服务器不关闭，两次获取session是否为同一个？" class="headerlink" title="当客户端关闭后，服务器不关闭，两次获取session是否为同一个？"></a>当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</h4></blockquote><ul><li><strong>默认情况下。不是。</strong></li><li>如果需要相同，则可以创建Cookie，键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cookie c = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());</span><br><span class="line"></span><br><span class="line">c.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">response.addCookie(c);</span><br></pre></td></tr></table></figure><blockquote><h4 id="客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"><a href="#客户端不关闭，服务器关闭后，两次获取的session是同一个吗？" class="headerlink" title="客户端不关闭，服务器关闭后，两次获取的session是同一个吗？"></a>客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</h4></blockquote><ul><li><p><strong>不是同一个，但是要确保数据不丢失</strong>。tomcat自动完成以下工作</p><ul><li><p>session的钝化：</p><ul><li>在服务器正常关闭之前，将session对象系列化到硬盘上</li></ul></li><li><p>session的活化：</p><ul><li>在服务器启动后，将session文件转化为内存中的session对象即可。</li><li>使用Tomcat可以实现此功能，而使用idea无法实现此功能</li></ul></li></ul></li></ul><blockquote><h4 id="session什么时候被销毁？"><a href="#session什么时候被销毁？" class="headerlink" title="session什么时候被销毁？"></a>session什么时候被销毁？</h4></blockquote><ul><li>服务器关闭<ul><li>session对象调用invalidate() 。</li><li>session默认失效时间 30分钟</li></ul></li><li>选择性配置修改    <session-config>     <session-timeout>30</session-timeout></session-config></li></ul><h4 id="3）特点"><a href="#3）特点" class="headerlink" title="3）特点"></a>3）特点</h4><ul><li>session<strong>用于存储一次会话的多次请求的数据</strong>，存在服务器端<ul><li>session<strong>可以存储任意类型</strong>，任意大小的数据</li></ul></li></ul><ul><li><strong>session与Cookie的区别：</strong><ol><li>session<strong>存储数据在服务器端</strong>，Cookie在客户端</li><li>session<strong>没有数据大小限制</strong>，Cookie有</li><li>session<strong>数据安全</strong>，Cookie相对于不安全</li></ol></li></ul><h2 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h2><h4 id="案例需求："><a href="#案例需求：" class="headerlink" title="案例需求："></a>案例需求：</h4><ol><li>访问带有验证码的登录页面  login.jsp</li><li>用户输入用户名，密码以及验证码。<ul><li>如果用户名和密码输入有误，跳转登录页面，提示：用户名或密码错误</li><li>如果验证码输入有误，跳转登录页面，提示：验证码错误</li><li>如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您</li></ul></li></ol><h4 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h4><ul><li><img src="https://i.loli.net/2021/01/26/py3FJTmzZa1CLD8.png" alt="登录案例.png"></li></ul><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;会话技术&lt;ul&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;li&gt;Session&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://chanwillian.github.io/categories/JavaWeb/"/>
    
    
  </entry>
  
  <entry>
    <title>List-07_Response</title>
    <link href="https://chanwillian.github.io/2021/04/06/JavaWeb/Tomcat&amp;Servlet/List-07-Response/"/>
    <id>https://chanwillian.github.io/2021/04/06/JavaWeb/Tomcat&amp;Servlet/List-07-Response/</id>
    <published>2021-04-06T07:34:54.000Z</published>
    <updated>2021-05-13T12:20:37.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><ul><li>HTTP协议：响应消息</li><li>Response对象</li><li>ServletContext对象</li></ul><h2 id="0-1-HTTP协议"><a href="#0-1-HTTP协议" class="headerlink" title="0.1 HTTP协议"></a>0.1 HTTP协议</h2><ul><li><strong>响应消息：服务器端发送给客户端的数据</strong></li></ul><h4 id="数据格式："><a href="#数据格式：" class="headerlink" title="数据格式："></a>数据格式：</h4><ul><li><p><strong>响应行</strong></p><ul><li><p>组成：协议/版本 响应状态码 状态码描述</p></li><li><p>响应状态码：服务器告诉客户端浏览器<strong>本次请求和响应的一个状态</strong>。<strong>状态码都是3位数字</strong> </p><ul><li><strong>分类</strong>：<ul><li>1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码</li><li>2xx：成功。代表：200</li><li>3xx：重定向。代表：302(重定向)，304(访问缓存)</li><li>4xx：<strong>客户端错误</strong>。<ul><li>代表：<ul><li><strong>404（请求路径没有对应的资源）</strong> </li><li><strong>405：请求方式没有对应的doXxx方法</strong></li></ul></li></ul></li><li>5xx：<strong>服务器端错误</strong>。代表：500(服务器内部出现异常)</li><li><strong>根据状态码，检索问题的所在之处。</strong></li><li>例如：<img src="https%EF%BC%9A%5Ci.loli.net%5C2021%5C04%5C06%5CwJZtMcDiVCN54ug.png" alt="重定向"></li></ul></li></ul></li></ul></li></ul><ul><li><p><strong>响应头：</strong></p><ol><li>格式：<code>响应头名称： 值</code></li><li>常见的响应头：<ul><li>Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</li><li>Content-disposition：服务器告诉客户端以什么格式打开响应体数据</li></ul></li><li>值：<ul><li>in-line：默认值,在当前页面内打开</li><li>attachment;filename=xxx：<strong>以附件形式打开响应体</strong>。<strong>文件下载</strong></li></ul></li></ol></li><li><p><strong>响应空行</strong></p></li><li><p><strong>响应体：传输的数据</strong></p></li></ul><ul><li><strong>响应消息示例</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Content-Type： text&#x2F;html;charset&#x3D;UTF-8</span><br><span class="line">Content-Length： 101</span><br><span class="line">Date： Wed, 06 Jun 2018 07：08：42 GMT</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  hello , response</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="0-2-Response对象"><a href="#0-2-Response对象" class="headerlink" title="0.2 Response对象"></a>0.2 Response对象</h2><ul><li><p><strong>功能：设置响应消息</strong></p><ol><li><p>设置响应行</p><ul><li>格式：HTTP/1.1 200 ok</li></ul></li><li><p><strong>设置状态码：setStatus(int sc)</strong> </p></li><li><p>设置响应头：<strong>setHeader(String name, String value)</strong> </p></li><li><p>设置响应体：</p></li></ol></li><li><p><strong>示例：完成重定向</strong></p><ul><li><p>重定向：资源跳转的方式</p></li><li><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 设置状态码为302</span></span><br><span class="line">  response.setStatus(<span class="number">302</span>);</span><br><span class="line">  <span class="comment">//2.设置响应头location</span></span><br><span class="line">  response.setHeader(<span class="string">"location"</span>,<span class="string">"/day15/responseDemo2"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//简单的重定向方法</span></span><br><span class="line">response.sendRedirect(<span class="string">"/day15/responseDemo2"</span>);</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="1）使用步骤："><a href="#1）使用步骤：" class="headerlink" title="1）使用步骤："></a>1）使用步骤：</h4><ol><li><p>获取输出流</p><ul><li>字符输出流：PrintWriter getWriter()</li><li>字节输出流：ServletOutputStream getOutputStream()</li></ul><ol start="2"><li>使用输出流，将数据输出到客户端浏览器</li></ol></li></ol><h4 id="2）forward和redirect-区别"><a href="#2）forward和redirect-区别" class="headerlink" title="2）forward和redirect 区别"></a>2）forward和redirect 区别</h4><ul><li><p><strong>重定向的特点： redirect</strong></p><ul><li>地址栏发生变化</li><li><strong>重定向可以访问其他站点(服务器)的资源</strong></li><li><strong>重定向是两次请求。不能使用request对象来共享数据</strong></li></ul></li><li><p><strong>转发的特点：forward</strong></p><ul><li>转发地址栏路径不变</li><li>转发只能访问当前服务器下的资源</li><li><strong>转发是一次请求，可以使用request对象来共享数据</strong></li></ul></li></ul><h4 id="3）路径写法："><a href="#3）路径写法：" class="headerlink" title="3）路径写法："></a>3）路径写法：</h4><blockquote><h4 id="相对路径："><a href="#相对路径：" class="headerlink" title="相对路径："></a>相对路径：</h4></blockquote><ul><li><p><strong>通过相对路径不可以确定唯一资源</strong></p></li><li><p>例如：<code>./index.html</code></p></li></ul><ul><li><strong>不以 /  开头，以 . 开头路径</strong></li><li>规则：找到当前资源和目标资源之间的相对位置关系<ul><li>./  ：当前目录</li><li>../  ： 后退一级目录</li></ul></li></ul><blockquote><h4 id="绝对路径："><a href="#绝对路径：" class="headerlink" title="绝对路径："></a>绝对路径：</h4></blockquote><ul><li><p><strong>通过绝对路径可以确定唯一资源</strong></p><ul><li>例如：http：//localhost/day15/responseDemo2/day15/responseDemo2</li></ul></li><li><p><strong>以  / 开头的路径</strong></p></li><li><p>规则：<strong>判断定义的路径是给谁用的</strong>？判断请求将来从哪儿发出</p><ul><li>给客户端浏览器使用：<strong>需要加虚拟目录</strong>(项目的访问路径)  /day35<ul><li>建议虚拟目录动态获取：request.getContextPath()</li><li><a> , <form> 重定向…</li></ul></li><li>给服务器使用：不需要加虚拟目录  /responseDemo1<ul><li>转发路径</li></ul></li></ul></li></ul><h4 id="4）服务器输出数据到浏览器"><a href="#4）服务器输出数据到浏览器" class="headerlink" title="4）服务器输出数据到浏览器"></a>4）服务器输出数据到浏览器</h4><blockquote><h4 id="服务器输出字符数据到浏览器"><a href="#服务器输出字符数据到浏览器" class="headerlink" title="服务器输出字符数据到浏览器"></a>服务器输出字符数据到浏览器</h4></blockquote><ul><li><p>步骤：</p><ol><li>获取字符输出流</li><li>输出数据</li></ol></li><li><p><strong>注意：乱码问题：</strong></p><ol><li><p><strong>PrintWriter pw = response.getWriter();</strong>    获取的流的默认编码是ISO-8859-1</p></li><li><p>设置该流的默认编码</p></li><li><p>告诉浏览器响应体使用的编码</p><ul><li><pre><code class="java"><span class="comment">//简单的形式，设置编码，是在获取流之前设置</span>response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);&lt;!--￼<span class="number">3</span>--&gt;</code></pre></li></ul></li></ol></li></ul><h2 id="03-ServletContext对象："><a href="#03-ServletContext对象：" class="headerlink" title="03.ServletContext对象："></a>03.ServletContext对象：</h2><ul><li><p>概念：<strong>代表整个web应用</strong>，可以和程序的容器(服务器)来通信</p></li><li><p>ServletContext：servlet container。</p></li></ul><h4 id="获取："><a href="#获取：" class="headerlink" title="获取："></a>获取：</h4><ol><li>通过request对象获取      request.getServletContext();</li><li>通过HttpServlet获取        this.getServletContext();</li></ol><h4 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h4><ol><li><p><strong>获取MIME类型：</strong></p><ul><li><strong>MIME类型</strong>：在互联网通信过程中定义的一种文件数据类型<ul><li>格式： 大类型/小类型   <strong>text/html        image/jpeg</strong></li></ul></li><li>获取：String <strong>getMimeType</strong>(String file)  </li></ul></li><li><p><strong>域对象：共享数据</strong></p><ul><li><p><strong>setAttribute(String name,Object value)</strong></p></li><li><p><strong>getAttribute(String name)</strong></p></li><li><p><strong>removeAttribute(String name)</strong>  </p></li><li><p>ServletContext对象范围：所有用户所有请求的数据。这个东西代表整个web应用，太大了，<strong>一般不怎么会用到他。</strong></p></li></ul></li><li><p><strong>获取文件的真实(服务器)路径</strong>（重点）</p><p>方法：String <strong>getRealPath</strong>(String path)  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> b = context.getRealPath(<span class="string">"/b.txt"</span>);<span class="comment">//web目录下资源访问</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">   </span><br><span class="line"><span class="built_in">String</span> c = context.getRealPath(<span class="string">"/WEB-INF/c.txt"</span>);<span class="comment">//WEB-INF目录下的资源访问</span></span><br><span class="line"> System.out.println(c);</span><br><span class="line">   </span><br><span class="line"> <span class="built_in">String</span> a = context.getRealPath(<span class="string">"/WEB-INF/classes/a.txt"</span>);<span class="comment">//src目录下的资源访问</span></span><br><span class="line"> System.out.println(a);</span><br></pre></td></tr></table></figure></li></ol><h2 id="0-4-案例："><a href="#0-4-案例：" class="headerlink" title="0.4 案例："></a>0.4 案例：</h2><blockquote><h4 id="文件下载需求："><a href="#文件下载需求：" class="headerlink" title="文件下载需求："></a>文件下载需求：</h4></blockquote><ol><li>页面显示超链接</li><li>点击超链接后弹出下载提示框</li><li>完成图片文件下载</li></ol><blockquote><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4></blockquote><ol><li>超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</li><li>任何资源都必须弹出下载提示框</li><li><strong>使用响应头设置资源的打开方式：</strong><ul><li><strong>content-disposition：attachment;filename=xxx</strong></li></ul></li></ol><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li><p>定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</p><ol start="2"><li>定义Servlet<ul><li>获取文件名称        </li><li>使用字节输入流加载文件进内存</li><li><strong>指定response的响应头</strong>： content-disposition：attachment;filename=xxx</li><li>将数据写出到response输出流</li></ul></li></ol></li></ol><p><strong>downloadServlet</strong></p><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><ul><li>中文文件问题<ul><li>解决思路：<ol><li>获取客户端使用的浏览器版本信息</li><li>根据不同的版本信息，设置filename的编码方式不同</li></ol></li></ul></li></ul><p><strong>DownLoadUtils</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;HTTP协议：响应消息&lt;/li&gt;
&lt;li&gt;Response对象&lt;/li&gt;
&lt;li&gt;ServletContext对
      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://chanwillian.github.io/categories/JavaWeb/"/>
    
    
  </entry>
  
  <entry>
    <title>List-06_Servlet&amp;HTTP&amp;Request</title>
    <link href="https://chanwillian.github.io/2021/04/06/JavaWeb/Tomcat&amp;Servlet/List-06-Servlet&amp;HTTP&amp;Request/"/>
    <id>https://chanwillian.github.io/2021/04/06/JavaWeb/Tomcat&amp;Servlet/List-06-Servlet&amp;HTTP&amp;Request/</id>
    <published>2021-04-06T07:01:03.000Z</published>
    <updated>2021-04-06T07:02:37.228Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容："><a href="#今日内容：" class="headerlink" title="今日内容："></a>今日内容：</h3><ul><li>Servlet</li><li>HTTP协议</li><li>Request</li></ul><h2 id="0-1-Servlet："><a href="#0-1-Servlet：" class="headerlink" title="0.1 Servlet："></a>0.1 Servlet：</h2><blockquote><h4 id="Servlet的体系结构"><a href="#Servlet的体系结构" class="headerlink" title="Servlet的体系结构"></a>Servlet的体系结构</h4></blockquote><ul><li><pre><code class="cmd">Servlet -- 接口    |GenericServlet -- 抽象类    // 以后不用    |HttpServlet  -- 抽象类        //以后用这个&lt;!--￼<span class="number">0</span>--&gt;  请求方式 请求url 请求协议/版本  GET /login.html    HTTP/<span class="number">1</span>.<span class="number">1</span>  &lt;!--￼<span class="number">1</span>--&gt;</code></pre></li></ul><ul><li>响应消息数据格式    </li></ul><h2 id="0-3-Request："><a href="#0-3-Request：" class="headerlink" title="0.3 Request："></a>0.3 Request：</h2><ul><li><p>request对象和response<strong>对象的原理</strong></p><ul><li>request和response<strong>对象是由服务器创建的</strong>。我们来使用它们</li><li>request<strong>对象是来获取请求消息</strong>，response<strong>对象是来设置响应消息</strong></li><li>例如：</li><li><img src="https://i.loli.net/2021/04/06/p2xSfETGXoQMw8h.png" alt="request&amp;response对象原理"></li></ul></li><li><p><strong>Request对象继承体系结构：</strong>    </p><ul><li><pre><code class="cmd">ServletRequest        --    接口    |    继承HttpServletRequest    -- 接口    |    实现org.apache.catalina.connector.RequestFacade 类(tomcat)&lt;!--￼<span class="number">2</span>--&gt;  CREATE DATABASE day14;  USE day14;  CREATE TABLE USER(  id INT PRIMARY KEY AUTO_INCREMENT,  username VARCHAR(<span class="number">32</span>) UNIQUE <span class="keyword">NOT</span> NULL,  PASSWORD VARCHAR(<span class="number">32</span>) <span class="keyword">NOT</span> NULL  );</code></pre></li></ul></li></ul><ol start="3"><li><p>创建包domain,创建类User</p></li><li><p>创建包util,编写工具类JDBCUtils</p></li><li><p>创建包dao,创建类UserDao,提供login方法</p><ul><li><strong>学会使用test检验文件的正确性</strong>（UserDao完成后，即刻开始测试）</li></ul></li><li><p>编写servlet.LoginServlet类</p><ul><li>编写FailServlet和SuccessServlet类</li></ul></li><li><p>login.html中form表单的action路径的写法</p><ul><li><strong>虚拟目录+Servlet的资源路径</strong></li></ul></li><li><p>BeanUils工具类，简化数据封装</p><ul><li><strong>用于封装JavaBean</strong></li><li><strong>JavaBean</strong>：标准的Java类</li></ul></li></ol><h4 id="4）要求："><a href="#4）要求：" class="headerlink" title="4）要求："></a>4）要求：</h4><ol><li><strong>类必须被public修饰</strong></li><li><strong>必须提供空参的构造器</strong></li><li><strong>成员变量必须使用private修饰</strong></li><li><strong>提供公共setter和getter方法</strong></li></ol><h2 id="0-4-BeanUtils工具类"><a href="#0-4-BeanUtils工具类" class="headerlink" title="0.4 BeanUtils工具类"></a>0.4 BeanUtils工具类</h2><blockquote><h4 id="功能：封装数据"><a href="#功能：封装数据" class="headerlink" title="功能：封装数据"></a>功能：封装数据</h4></blockquote><ul><li><p>概念：</p></li><li><p>成员变量：</p></li><li><p>属性：setter和getter方法截取后的产物</p><ul><li>例如：getUsername() –&gt; Username–&gt; username</li></ul></li><li><p><strong>方法</strong>：</p><ul><li>setProperty()</li><li>getProperty()</li><li><strong>populate</strong>(Object obj , Map map)：<strong>将map集合的键值对信息，封装到对应的JavaBean对象中</strong>        </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容：&quot;&gt;&lt;a href=&quot;#今日内容：&quot; class=&quot;headerlink&quot; title=&quot;今日内容：&quot;&gt;&lt;/a&gt;今日内容：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Servlet&lt;/li&gt;
&lt;li&gt;HTTP协议&lt;/li&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://chanwillian.github.io/categories/JavaWeb/"/>
    
    
  </entry>
  
  <entry>
    <title>List-05_Tomcat&amp;Servlet</title>
    <link href="https://chanwillian.github.io/2021/04/06/JavaWeb/Tomcat&amp;Servlet/List-05-Tomcat&amp;Servlet/"/>
    <id>https://chanwillian.github.io/2021/04/06/JavaWeb/Tomcat&amp;Servlet/List-05-Tomcat&amp;Servlet/</id>
    <published>2021-04-06T06:22:21.000Z</published>
    <updated>2021-04-06T06:23:15.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><ul><li>web相关概念回顾</li><li>web服务器软件：<strong>Tomcat</strong></li><li>Servlet入门学习</li></ul><h2 id="0-1-web相关概念回顾"><a href="#0-1-web相关概念回顾" class="headerlink" title="0.1 web相关概念回顾"></a>0.1 web相关概念回顾</h2><ol><li><p><strong>软件架构</strong></p><ol><li>C/S：客户端/服务器端</li><li>B/S：浏览器/服务器端</li></ol></li><li><p><strong>资源分类</strong></p><ol><li>静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析<ul><li>如： html,css,JavaScript</li></ul></li><li>动态资源：每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，再返回给浏览器<ul><li>如：servlet/jsp,php,asp….</li></ul></li></ol></li><li><p><strong>网络通信三要素</strong></p><ol><li>IP：电子设备(计算机)在网络中的唯一标识。</li><li>端口：应用程序在计算机中的唯一标识。 0~65536</li><li>传输协议：规定了数据传输的规则</li></ol><ul><li><strong>基础协议</strong>：<ul><li>tcp：安全协议，三次握手。 速度稍慢</li><li>udp：不安全协议。 速度快</li></ul></li></ul></li><li><h3 id="web服务器软件："><a href="#web服务器软件：" class="headerlink" title="web服务器软件："></a>web服务器软件：</h3><ul><li>服务器：<strong>安装了服务器软件的计算机</strong></li><li>服务器软件：<strong>接收用户的请求，处理请求，做出响应</strong><ul><li>web服务器软件：接收用户的请求，处理请求，做出响应。<ul><li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li><li>web容器</li></ul></li></ul></li><li><strong>常见的java相关的web服务器软件</strong>：<ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li><li>JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</li></ul></li></ul></li></ol><h2 id="0-2-Tomcat："><a href="#0-2-Tomcat：" class="headerlink" title="0.2 Tomcat："></a>0.2 Tomcat：</h2><ul><li>web服务器软件</li></ul><h4 id="1）快速入门"><a href="#1）快速入门" class="headerlink" title="1）快速入门"></a>1）快速入门</h4><ol><li><p>下载：<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">http://tomcat.apache.org/</a></p></li><li><p>安装：解压压缩包即可。</p><ul><li>注意：安装目录建议不要有中文和空格</li></ul></li><li><p>卸载：删除目录就行了</p></li><li><p><strong>启动</strong>：</p><ul><li>bin/startup.bat ,双击运行该文件即可</li><li><strong>访问</strong>：浏览器输入：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 回车访问自己<ul><li>http://别人的ip:8080 访问别人</li></ul></li></ul></li></ol><ul><li><strong>可能遇到的问题</strong>：<ul><li>黑窗口一闪而过：<ul><li>原因： 没有正确配置JAVA_HOME环境变量</li><li>解决方案：正确配置JAVA_HOME环境变量</li></ul></li><li><strong>启动报错</strong>：<ul><li>暴力：找到占用的端口号，并且找到对应的进程，杀死该进程<ul><li>netstat -ano</li></ul></li><li>温柔：修改自身的端口号<ul><li>conf/server.xml</li><li>&lt;Connector port=”8888” protocol=”HTTP/1.1”<pre><code>connectionTimeout=&quot;20000&quot;redirectPort=&quot;8445&quot; /&gt;</code></pre></li></ul></li></ul></li><li><strong>一般会将tomcat的默认端口号修改为80</strong>。80端口号是http协议的默认端口号。<ul><li>好处：在访问时，就不用输入端口号</li></ul></li></ul></li></ul><ol start="5"><li><p><strong>关闭</strong>：</p><ol><li>正常关闭：<ul><li>bin/shutdown.bat</li><li>ctrl+c</li></ul></li><li>强制关闭：<ul><li>点击启动窗口的<strong>×</strong></li></ul></li></ol></li></ol><h4 id="2）配置"><a href="#2）配置" class="headerlink" title="2）配置:"></a>2）配置:</h4><ul><li><p><strong>部署项目的方式</strong>：</p><ul><li><p><strong>1、直接将项目放到webapps目录下即可。</strong></p><ul><li><p>/hello：项目的访问路径</p></li><li><pre><code class="cmd">--&gt; 虚拟目录例如：localhost/hello&lt;!--￼<span class="number">0</span>--&gt;</code></pre></li></ul></li><li><p><strong>3、在conf\Catalina\localhost创建任意名称的xml文件</strong>。在文件中编写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context docBase&#x3D;&quot;D:\hello&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><ul><li>虚拟目录：xml文件的名称</li></ul></li></ul></li><li></li><li><h4 id="静态项目和动态项目："><a href="#静态项目和动态项目：" class="headerlink" title="静态项目和动态项目："></a>静态项目和动态项目：</h4><ul><li><p>目录结构</p><ul><li><p>Java<strong>动态项目</strong>的目录结构：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 项目的根目录</span><br><span class="line">-- WEB-INF目录：</span><br><span class="line">-- web.xml：web项目的核心配置文件</span><br><span class="line">-- classes目录：放置字节码文件的目录</span><br><span class="line">-- lib目录：放置依赖的jar包</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>* 将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目。</code></pre><ul><li><p><strong>tomcat目录结构</strong></p><ul><li><img src="https://i.loli.net/2021/04/06/nFoKvpS5iXZHkfm.png" alt="tomcat目录结构"></li></ul></li></ul><h2 id="0-3-Servlet：server-applet"><a href="#0-3-Servlet：server-applet" class="headerlink" title="0.3 Servlet：server applet"></a>0.3 Servlet：server applet</h2><ul><li><strong>概念：运行在服务器端的小程序</strong><ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到    (tomcat 识别)的规则。</li><li>将来我们自定义一个类，实现Servlet接口，复写方法。</li><li>例如：<img src="https://i.loli.net/2021/04/06/G8vxts6UupIPH1z.png" alt="Servlet"></li></ul></li></ul><h4 id="1）快速入门："><a href="#1）快速入门：" class="headerlink" title="1）快速入门："></a>1）快速入门：</h4><ol><li><p>创建JavaEE项目</p></li><li><p>定义一个类，实现Servlet接口</p><ul><li><pre><code>public class ServletDemo1 implements Servlet<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 实现接口中的抽象方法</span><br><span class="line"></span><br><span class="line">4. 配置Servlet</span><br><span class="line"></span><br><span class="line">   在web.xml中配置：</span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;xml</span><br><span class="line">   &lt;!--配置Servlet --&gt;</span><br><span class="line">   &lt;servlet&gt;</span><br><span class="line">   &lt;servlet-name&gt;demo1&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;cn.itcast.web.servlet.ServletDemo1&lt;&#x2F;servlet-class&gt;</span><br><span class="line">   &lt;&#x2F;servlet&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;demo1&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;&#x2F;demo1&lt;&#x2F;url-pattern&gt;</span><br><span class="line">   &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ol><h4 id="2）执行原理："><a href="#2）执行原理：" class="headerlink" title="2）执行原理："></a>2）执行原理：</h4><ol><li>当服务器接受到客户端浏览器的请求后，会解析请求URL路径，<strong>获取访问的Servlet的资源路径</strong></li><li><strong>查找web.xml文件</strong>，是否有对应的<url-pattern>标签体内容。</li><li><strong>如果有</strong>，则在找到对应的<servlet-class>全类名</li><li><strong>tomcat会将字节码文件加载进内存Class.forName()，并且创建其对象 cls.newInstance()</strong></li><li><strong>调用其方法(Service)</strong></li></ol><h4 id="3）Servlet中的生命周期方法："><a href="#3）Servlet中的生命周期方法：" class="headerlink" title="3）Servlet中的生命周期方法："></a>3）Servlet中的生命周期方法：</h4><ol><li><strong>被创建</strong>：执行init方法，只执行一次<ul><li>Servlet什么时候被创建？<ul><li><strong>默认情况下</strong>，第一次被访问时，Servlet被创建<ul><li>可以<strong>配置执行Servlet的创建时机。</strong><ul><li>在<servlet>标签下配置<ol><li><strong>第一次被访问时，创建</strong><ul><li><load-on-startup>的值为负数</li></ul></li><li><strong>在服务器启动时，创建</strong><ul><li><load-on-startup>的值为0或正整数</li></ul></li></ol></li></ul></li></ul></li><li>Servlet的 Init 方法，只执行一次，说明一个Servlet在内存中只存在一个对象，<strong>Servlet是单例的</strong></li><li>多个用户同时访问时，可能存在线程安全问题。<ul><li><strong>解决</strong>：<strong>尽量不要在Servlet中定义成员变量</strong>。即使定义了成员变量，也不要对修改值</li></ul></li></ul></li></ul></li><li><strong>提供服务</strong>：执行service方法，执行多次<ul><li>每次访问Servlet时，Service方法都会被调用一次。</li></ul></li><li><strong>被销毁</strong>：执行destroy方法，只执行一次<ul><li>Servlet被销毁时执行。服务器关闭时，Servlet被销毁</li><li>只有服务器正常关闭时，才会执行destroy方法。</li><li><strong>destroy方法在Servlet被销毁之前执行，一般用于释放资源</strong></li></ul></li></ol><h2 id="0-4-Servlet3-0："><a href="#0-4-Servlet3-0：" class="headerlink" title="0.4 Servlet3.0："></a>0.4 Servlet3.0：</h2><ul><li><h4 id="好处："><a href="#好处：" class="headerlink" title="好处："></a><strong>好处</strong>：</h4><ul><li>支持注解配置。<strong>可以不需要</strong>web.xml了。</li></ul></li></ul><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</li><li>定义一个类，实现Servlet接口</li><li>复写方法</li><li><strong>在类上使用@WebServlet注解，进行配置</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"资源路径"</span>)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WebServlet &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//相当于&lt;Servlet-name&gt;</span></span><br><span class="line"></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//代表urlPatterns()属性配置</span></span><br><span class="line"></span><br><span class="line">    String[] urlPatterns() <span class="keyword">default</span> &#123;&#125;;<span class="comment">//相当于&lt;url-pattern&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">loadOnStartup</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;<span class="comment">//相当于&lt;load-on-startup&gt;</span></span><br><span class="line"></span><br><span class="line">    WebInitParam[] initParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSupported</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">smallIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">largeIcon</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">displayName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0-5-IDEA与tomcat的相关配置"><a href="#0-5-IDEA与tomcat的相关配置" class="headerlink" title="0.5 IDEA与tomcat的相关配置"></a>0.5 IDEA与tomcat的相关配置</h2><ol><li><p>IDEA会为每一个tomcat部署的项目单独建立一份配置文件</p><ul><li>查看控制台的<strong>log</strong>：<strong>Using CATALINA_BASE</strong>:   “C:\Users\fqy.IntelliJIdea2018.1\system\tomcat_itcast”</li></ul></li><li><p><strong>工作空间项目和 tomcat部署的web项目</strong></p><ul><li><strong>tomcat真正访问的是“tomcat部署的web项目”，</strong></li><li>“<strong>tomcat部署的web项目”对应着”工作空间项目” 的web目录下的所有资源</strong></li><li><strong>WEB-INF目录下的资源不能被浏览器直接访问。</strong></li></ul></li><li><p><strong>断点调试：使用”小虫子”启动 dubug 启动</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;web相关概念回顾&lt;/li&gt;
&lt;li&gt;web服务器软件：&lt;strong&gt;Tomcat&lt;/strong&gt;&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://chanwillian.github.io/categories/JavaWeb/"/>
    
    
  </entry>
  
  <entry>
    <title>List-10综合案例</title>
    <link href="https://chanwillian.github.io/2021/04/06/JavaWeb/List-10%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/"/>
    <id>https://chanwillian.github.io/2021/04/06/JavaWeb/List-10%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B/</id>
    <published>2021-04-06T01:40:55.000Z</published>
    <updated>2021-04-06T01:49:12.003Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><ul><li><p>简单功能</p><ul><li>列表查询</li><li>登录</li><li>添加</li><li>删除</li><li>修改</li></ul></li><li><p>复杂功能</p><ul><li>删除选中</li><li>分页查询<ul><li>好处：<ul><li>减轻服务器内存的开销</li><li>提升用户体验</li></ul></li></ul></li><li>复杂条件查询</li></ul></li></ul><h2 id="0-1-简单功能"><a href="#0-1-简单功能" class="headerlink" title="0.1 简单功能"></a>0.1 简单功能</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><ol><li>调整页面，加入验证码功能</li><li>代码实现</li></ol><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p><img src="https://i.loli.net/2021/04/06/ouSU7zgOWshtDA8.png" alt="3.添加功能"></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p><img src="https://i.loli.net/2021/04/06/ouSU7zgOWshtDA8.png" alt="4.删除功能"></p><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p><img src="https://i.loli.net/2021/04/06/ouSU7zgOWshtDA8.png" alt="5.修改功能"></p><h2 id="0-2-复杂功能"><a href="#0-2-复杂功能" class="headerlink" title="0.2 复杂功能"></a>0.2 复杂功能</h2><h3 id="删除选中"><a href="#删除选中" class="headerlink" title="删除选中"></a>删除选中</h3><ul><li><img src="https://i.loli.net/2021/03/26/bMwvQxP7iluJLqC.png" alt=""></li></ul><ul><li><strong>提交被选中项的最佳方案是</strong>：数据表格外层，<strong>套上一层form表单</strong></li><li>没有成功     <strong>应该是表单没有提交成功</strong>  delServletServlet无法获取到，所选中的项目</li></ul><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ul><li><p><strong>解决实际问题的注意事项</strong></p><ul><li>清楚输入和输出，解决输入和输出之间的转化。也就是设计算法，想好问题的解决思路。</li><li>算法的定义：根据输入，运行有限的代码语句，从而得到输出。</li></ul></li><li><p><img src="https://i.loli.net/2021/04/05/U1Yz8WmugT6wi7l.png" alt=""></p></li><li><p><img src="https://i.loli.net/2021/04/05/Y7sZFBhv2TKHC5n.png" alt=""></p><ul><li><p><strong>代码实现步骤</strong></p><ul><li>根据思路，逐步实现各个方法和功能</li><li>例如，按照构思思路，先完成PageBean，<strong>servlet</strong>，<strong>然后继续完成</strong>service，dao层的相关方法。</li></ul></li><li><p>分页显示信息，取代了全部信息直接展示。</p></li></ul></li></ul><h2 id="案例：用户信息列表展示"><a href="#案例：用户信息列表展示" class="headerlink" title="案例：用户信息列表展示"></a>案例：用户信息列表展示</h2><ul><li>需求：用户信息的增删改查操作</li></ul><h4 id="设计："><a href="#设计：" class="headerlink" title="设计："></a>设计：</h4><ol><li><p>技术选型：<strong>Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat</strong></p></li><li><p>数据库设计：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create database day12; -- 创建数据库</span><br><span class="line">use day12;    -- 使用数据库</span><br><span class="line">create table user(   -- 创建表</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20) not null,</span><br><span class="line">gender varchar(5),</span><br><span class="line">age int,</span><br><span class="line">address varchar(32),</span><br><span class="line">qqvarchar(20),</span><br><span class="line">email varchar(50),</span><br><span class="line">    username varchar(10),</span><br><span class="line">    password varchar(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>开发：</p><ul><li>环境搭建<ul><li>创建数据库环境</li><li>创建项目，导入需要的jar包</li><li>编码</li></ul></li></ul></li><li><p>测试</p></li><li><p>部署运维</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;简单功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列表查询&lt;/li&gt;
&lt;li&gt;登录&lt;/li&gt;
&lt;li&gt;添加&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://chanwillian.github.io/categories/JavaWeb/"/>
    
    
  </entry>
  
  <entry>
    <title>List-11_Filter&amp;Listener</title>
    <link href="https://chanwillian.github.io/2021/04/06/JavaWeb/List-11-Filter&amp;Listener/"/>
    <id>https://chanwillian.github.io/2021/04/06/JavaWeb/List-11-Filter&amp;Listener/</id>
    <published>2021-04-06T01:34:44.000Z</published>
    <updated>2021-05-13T00:03:29.651Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><ul><li>Filter：过滤器</li><li>Listener：监听器</li></ul><h2 id="0-1-Filter：过滤器"><a href="#0-1-Filter：过滤器" class="headerlink" title="0.1 Filter：过滤器"></a>0.1 Filter：过滤器</h2><ol><li><h4 id="概念："><a href="#概念：" class="headerlink" title="概念："></a><strong>概念</strong>：</h4><ul><li>生活中的过滤器：净水器,空气净化器，土匪、</li><li>web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</li><li><strong>过滤器的作用</strong>：<ul><li><strong>一般用于完成通用的操作</strong>。如：<strong>登录验证</strong>、统一编码处理、敏感字符过滤…</li></ul></li><li>例如，<ul><li><img src="https://i.loli.net/2021/04/07/G5ZSBs8TFJazA7C.png" alt="1.Filter过滤器"></li></ul></li></ul></li></ol><h4 id="2）快速入门："><a href="#2）快速入门：" class="headerlink" title="2）快速入门："></a>2）快速入门：</h4><ul><li><p>步骤：</p><ol><li><p>定义一个类，实现接口Filter</p></li><li><p>复写方法</p></li><li><p>配置拦截路径</p><ol><li>web.xml</li><li>注解(<strong>常用</strong>)</li></ol></li></ol></li><li><p>代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>)<span class="comment">//访问所有资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"filterDemo1被执行了...."</span>);<span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            </p><h4 id="3）过滤器细节："><a href="#3）过滤器细节：" class="headerlink" title="3）过滤器细节："></a>3）过滤器细节：</h4><ol><li>web.xml配置    <filter>       <filter-name>demo1</filter-name>       <filter-class>cn.itcast.web.filter.FilterDemo1</filter-class>   </filter>   <filter-mapping>       <filter-name>demo1</filter-name>           <!-- 拦截路径 -->      <url-pattern>/*</url-pattern>  </filter-mapping></li><li><strong>过滤器执行流程</strong><ol><li>执行过滤器</li><li>执行放行后的资源</li><li>回来执行过滤器放行代码下边的代码</li></ol></li><li><strong>过滤器生命周期方法</strong><ul><li>init：在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。<strong>用于加载资源</strong></li><li>doFilter：每一次请求被拦截资源时，会执行。执行多次</li><li>destroy：在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。<strong>用于释放资源</strong></li></ul></li></ol><p><strong>4.过滤器配置详解</strong></p><ul><li><p><strong>拦截路径配置</strong>：</p><ul><li><p>具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行</p></li><li><p>拦截目录： /user/*    访问/user下的所有资源时，过滤器都会被执行</p></li><li><p>后缀名拦截： *.jsp        访问所有后缀名为jsp资源时，过滤器都会被执行</p></li><li><p>拦截所有资源：/*        访问所有资源时，过滤器都会被执行</p></li></ul></li><li><p><strong>拦截方式配置</strong>：资源被访问的方式</p><ul><li><p><strong>注解配置</strong>：</p><ul><li><p>设置dispatcherTypes属性</p><ol><li>REQUEST：默认值。<strong>浏览器直接请求资源</strong></li><li>FORWARD：<strong>转发访问资源</strong></li><li>INCLUDE：包含访问资源</li><li>ERROR：错误跳转资源</li><li>ASYNC：异步访问资源</li></ol></li></ul></li><li><p><strong>web.xml配置</strong></p><ul><li>设置<dispatcher></dispatcher>标签即可</li></ul></li></ul></li></ul><p>5、<strong>过滤器链</strong>(配置多个过滤器)</p><ul><li><strong>执行顺序</strong>：如果有两个过滤器：过滤器1和过滤器2<ol><li>过滤器1</li><li>过滤器2</li><li>资源执行</li><li>过滤器2</li><li>过滤器1 </li></ol></li></ul><ul><li><strong>过滤器先后顺序问题</strong>：<ol><li>注解配置：<strong>按照类名的字符串比较规则比较</strong>，值小的先执行<ul><li>例如： AFilter 和 BFilter，AFilter就先执行了。</li></ul></li><li>web.xml配置： <filter-mapping>谁定义在上边，谁先执行</li></ol></li></ul><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><h4 id="1）案例1-登录验证"><a href="#1）案例1-登录验证" class="headerlink" title="1）案例1_登录验证"></a>1）案例1_登录验证</h4><ul><li>需求：<ol><li>访问day17_case案例的资源。验证其是否登录</li><li>如果登录了，则直接放行。</li><li>如果没有登录，则跳转到登录页面，提示”您尚未登录，请先登录”。</li></ol></li><li><img src="https://i.loli.net/2021/04/07/Hk61AnxV8JeDGWa.png" alt="2.案例1_登录验证"></li></ul><h4 id="2）案例2-敏感词汇过滤"><a href="#2）案例2-敏感词汇过滤" class="headerlink" title="2）案例2_敏感词汇过滤"></a>2）案例2_敏感词汇过滤</h4><ul><li><p>需求：</p><ol><li>对day17_case案例录入的数据进行敏感词汇过滤</li><li>敏感词汇参考《敏感词汇.txt》</li><li>如果是敏感词汇，替换为 *** </li></ol></li><li><p><strong>分析</strong>：</p><ol><li>对request对象进行增强。增强获取参数相关方法</li><li>放行。传递代理对象</li><li><img src="https://i.loli.net/2021/04/07/AaySZqpg81veobR.png" alt="3.过滤敏感词汇"></li></ol></li></ul><h4 id="3）增强对象的功能："><a href="#3）增强对象的功能：" class="headerlink" title="3）增强对象的功能："></a>3）增强对象的功能：</h4><ul><li><p><strong>设计模式</strong>：<strong>一些通用的解决固定问题的方式</strong></p><ol><li><p>装饰模式</p></li><li><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><ol><li>概念：<ul><li>真实对象：被代理的对象</li><li>代理对象：</li><li>代理模式：代理对象代理真实对象，达到增强真实对象功能的目的</li><li><img src="https://i.loli.net/2021/04/07/uKYabAjZHEoWTIi.png" alt="4.代理"></li></ul></li><li>实现方式：<pre><code>    1. 静态代理：有一个类文件描述代理模式2. 动态代理：在内存中形成代理类</code></pre></li><li><strong>实现步骤</strong>：<ol><li>代理对象和真实对象实现相同的接口</li><li>代理对象 = <strong>Proxy.newProxyInstance( );</strong></li><li>使用代理对象调用方法。</li><li>增强方法</li></ol></li><li><strong>增强方式</strong>：<ul><li>增强参数列表</li><li>增强返回值类型</li><li>增强方法体执行逻辑</li></ul></li></ol></li></ol></li></ul><h2 id="0-2-Listener：监听器"><a href="#0-2-Listener：监听器" class="headerlink" title="0.2 Listener：监听器"></a>0.2 Listener：监听器</h2><ul><li><p><strong>概念</strong>：web的三大组件之一。</p><ul><li><h4 id="事件监听机制"><a href="#事件监听机制" class="headerlink" title="事件监听机制"></a>事件监听机制</h4><ul><li>事件    ：一件事情</li><li>事件源 ：事件发生的地方</li><li>监听器 ：一个对象</li><li>注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码</li></ul></li></ul></li></ul><h3 id="ServletContextListener："><a href="#ServletContextListener：" class="headerlink" title="ServletContextListener："></a>ServletContextListener：</h3><blockquote><h4 id="监听ServletContext对象的创建和销毁"><a href="#监听ServletContext对象的创建和销毁" class="headerlink" title="监听ServletContext对象的创建和销毁"></a>监听ServletContext对象的创建和销毁</h4></blockquote><ul><li><p>方法：</p><ul><li>void <strong>contextDestroyed</strong>(ServletContextEvent sce) ：ServletContext<strong>对象被销毁之前会调用该方法</strong></li><li>void <strong>contextInitialized</strong>(ServletContextEvent sce) ：ServletContext<strong>对象创建后会调用该方法</strong></li></ul></li><li><p><strong>步骤</strong>：</p><ol><li><p>定义一个类，实现ServletContextListener接口</p></li><li><p>复写方法</p></li><li><p><strong>配置</strong></p><ol><li><p>web.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">&lt;listener-class&gt;cn.itcast.web.listener.ContextLoaderListener&lt;&#x2F;listener-class&gt;   &lt;&#x2F;listener&gt;</span><br><span class="line"></span><br><span class="line">* 指定初始化参数&lt;context-param&gt;</span><br></pre></td></tr></table></figure></li><li><p>注解：</p><ul><li>@<strong>WebListener</strong></li></ul></li></ol></li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Filter：过滤器&lt;/li&gt;
&lt;li&gt;Listener：监听器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;0-1-
      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://chanwillian.github.io/categories/JavaWeb/"/>
    
    
  </entry>
  
  <entry>
    <title>List-09_EL&amp;JSTL笔记</title>
    <link href="https://chanwillian.github.io/2021/04/05/JavaWeb/JSP/List-09_EL&amp;JSTL%E7%AC%94%E8%AE%B0/"/>
    <id>https://chanwillian.github.io/2021/04/05/JavaWeb/JSP/List-09_EL&amp;JSTL%E7%AC%94%E8%AE%B0/</id>
    <published>2021-04-05T03:22:59.000Z</published>
    <updated>2021-04-05T03:24:02.845Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><ul><li><p><strong>JSP入门</strong></p><ul><li>指令</li><li>注释</li><li>内置对象</li></ul></li><li><p>MVC开发模式</p></li><li><p>EL表达式</p></li><li><p><strong>JSTL标签</strong></p></li><li><p>三层架构</p></li></ul><h2 id="0-1-JSP"><a href="#0-1-JSP" class="headerlink" title="0.1 JSP"></a>0.1 JSP</h2><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><ul><li>作用：<strong>用于配置JSP页面，导入资源文件</strong></li><li>格式：<ul><li><strong>&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 … %&gt;</strong></li></ul></li></ul><ul><li><p><strong>分类</strong>：</p><ul><li><p><strong>page： 配置JSP页面的</strong></p><ul><li><strong>contentType</strong>：<strong>等同于response.setContentType()</strong><ul><li>设置响应体的mime类型以及字符集</li><li>设置当前JSP页面的编码（<strong>只能是高级的IDE才能生效</strong>，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）</li></ul></li><li><strong>import</strong>：导包</li><li><strong>errorPage</strong>：<strong>当前页面发生异常后，会自动跳转到指定的错误页面</strong><ul><li><strong>isErrorPage</strong>：<strong>标识当前页面是否是错误页面</strong>。<strong>和 errorPage 配套使用</strong><ul><li><strong>true</strong>：是，可以使用内置对象exception；<strong>false</strong>：<strong>否。默认值。不可以使用内置对象exception</strong></li></ul></li></ul></li></ul></li><li><p><strong>include    ： 页面包含的。导入页面的资源文件</strong></p><ul><li>&lt;%@include file=”top.jsp”%&gt;</li></ul></li><li><p><strong>taglib ： 导入资源</strong></p><ul><li>&lt;%@ taglib prefix=”c” uri=”<a href="http://java.sun.com/jsp/jstl/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;</li><li><strong>prefix：前缀，自定义的</strong></li></ul></li></ul></li></ul><h4 id="注释"><a href="#注释" class="headerlink" title="注释:"></a>注释:</h4><ol><li><p>html注释：</p><!-- -->:只能注释html代码片段</li><li><p><strong>JSP注释：推荐使用</strong><br><strong>&lt;%– –%&gt;：可以注释所有</strong></p></li></ol><ul><li>*<em>使用快捷键即可生成相应的注释方式。    Ctrl + Shift + / *</em></li></ul><h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><ul><li><p><strong>在JSP页面中不需要创建，直接使用的对象</strong></p></li><li><p>一共有9个：</p><ul><li>​    <strong>变量名                    真实类型                            作用</strong></li><li><strong>pageContext            PageContext                       当前页面共享数据，还可以获取其他八个内置对象</strong></li><li><strong>request                     HttpServletRequest             一次请求访问的多个资源(转发)</strong></li><li><strong>session                    HttpSession                         一次会话的多个请求间</strong></li><li><strong>application               ServletContext                     所有用户间共享数据</strong></li><li><strong>response                  HttpServletResponse          响应对象</strong></li></ul></li></ul><ul><li><strong>page                        Object                                  当前页面(Servlet)的对象  this</strong></li><li><strong>out                           JspWriter                              输出对象，数据输出到页面上</strong></li><li><strong>config                      ServletConfig                       Servlet的配置对象</strong></li><li><strong>exception                 Throwable                           异常对象</strong></li></ul><p>​    </p><h2 id="0-2-MVC：开发模式"><a href="#0-2-MVC：开发模式" class="headerlink" title="0.2 MVC：开发模式"></a>0.2 MVC：开发模式</h2><ul><li>JSP演变历史<ul><li>早期只有servlet，只能使用response输出标签数据，非常麻烦</li><li>后来又jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中即写大量的java代码，有写html表，造成难于维护，难于分工协作</li><li><strong>再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性</strong></li></ul></li></ul><h4 id="MVC："><a href="#MVC：" class="headerlink" title="MVC："></a>MVC：</h4><ol><li><strong>M：Model，模型。JavaBean</strong><ul><li><strong>完成具体的业务操作，如：查询数据库，封装对象</strong></li></ul></li><li><strong>V：View，视图。JSP</strong><ul><li><strong>展示数据</strong></li></ul></li><li><strong>C：Controller，控制器。Servlet</strong><ul><li><strong>获取用户的输入</strong></li><li><strong>调用模型</strong></li><li><strong>将数据交给视图进行展示</strong></li></ul></li></ol><ul><li><strong>优缺点：</strong><ul><li>优点：<ul><li>耦合性低，方便维护，可以利于分工协作</li><li>重用性高</li></ul></li><li>缺点：<ul><li>使得项目架构变得复杂，对开发人员要求高</li></ul></li></ul></li></ul><h2 id="03-EL表达式"><a href="#03-EL表达式" class="headerlink" title="03.EL表达式"></a>03.EL表达式</h2><ul><li><p>概念：Expression Language 表达式语言</p></li><li><p>作用：<strong>替换和简化</strong>jsp页面中java代码的编写</p></li><li><p><strong>语法：${表达式}</strong>,例如 ${user.id}</p></li><li><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><ul><li><strong>JSP默认支持el表达式的</strong>。如果要忽略el表达式<ul><li>忽略当前jsp页面中所有的el表达式 设置jsp中page指令中：<strong>isELIgnored=”true”</strong>    </li><li>忽略单个el表达式  ${表达式} ：</li></ul></li></ul></li></ul><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><blockquote><h4 id="运算："><a href="#运算：" class="headerlink" title="运算："></a>运算：</h4></blockquote><ul><li>运算符：<ul><li>算数运算符： <strong>+ - *    /(div)    %(mod)</strong></li><li>比较运算符： &gt; &lt; &gt;= &lt;= == !=</li><li>逻辑运算符： <strong>&amp;&amp; (and)     || (or)    ! (not)</strong></li><li><strong>空运算符： empty</strong><ul><li><strong>功能</strong>：用于判断字符串、集合、数组对象是否为null或者长度是否为0<ul><li><strong>${empty list}</strong>：判断字符串、集合、数组对象是否为null或者长度为0</li><li><strong>${not empty str}</strong>：表示判断字符串、集合、数组对象是否不为null 并且 长度&gt;0</li></ul></li></ul></li></ul></li></ul><blockquote><h4 id="获取值"><a href="#获取值" class="headerlink" title="获取值"></a>获取值</h4></blockquote><ul><li>el表达式<strong>只能从域对象中获取值</strong></li></ul><p><strong>语法</strong>：</p><ul><li><p><strong>1.${域名称.键名}：从指定域中获取指定键的值</strong></p><ul><li><strong>域名称：</strong><ul><li>pageScope        –&gt; pageContext</li><li>requestScope     –&gt; request</li><li>sessionScope     –&gt; session</li><li>applicationScope –&gt; application（ServletContext）</li></ul></li></ul><p>例如：在request域中存储了name=张三，获取name对应的value值</p><p>​    获取：${requestScope.name}</p></li><li><p><strong>2. ${ 键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</strong></p></li><li><p><strong>3.获取对象、List集合、Map集合的值</strong></p><ul><li>对象：${域名称.键名.属性名}    本质上会去调用对象的getter方法</li><li>List集合：${域名称.键名[索引]}</li><li>Map集合：<ul><li>${域名称.键名.key名称}</li><li>${域名称.键名[“key名称”]}</li></ul></li></ul></li><li><p><strong>注意：</strong></p><ul><li><p><strong>对象的属性</strong></p><ul><li><p>setter或getter方法，去掉set或get，在将剩余部分，首字母变为小写。</p><p>例如，<strong>setName –&gt; Name –&gt; name</strong>；<strong>getBirStr –&gt; BirStr –&gt; birStr</strong></p></li></ul></li></ul></li></ul><h4 id="隐式对象："><a href="#隐式对象：" class="headerlink" title="隐式对象："></a>隐式对象：</h4><ul><li><p>el表达式中有11个隐式对象</p><ul><li><p><strong>pageContext：</strong></p><ul><li><p><strong>获取JSP其他八个内置对象</strong></p><p><strong>例如</strong>，常用方法，<strong>${pageContext.request.contextPath}：动态获取虚拟目录</strong>                </p></li></ul></li></ul></li></ul><p>​    </p><h2 id="04-JSTL"><a href="#04-JSTL" class="headerlink" title="04.JSTL"></a>04.JSTL</h2><ul><li><p>概念：JavaServer Pages Tag Library  <strong>JSP标准标签库</strong></p><ul><li>是由Apache组织提供的开源的免费的jsp标签   &lt;标签&gt;</li></ul></li><li><p><strong>作用</strong>：用于<strong>简化和替换</strong>jsp页面上的java代码        </p></li></ul><h4 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h4><ol><li>导入jstl相关jar包</li><li>引入标签库：taglib指令：  &lt;%@ taglib %&gt;</li><li>使用标签</li></ol><h4 id="常用的JSTL标签"><a href="#常用的JSTL标签" class="headerlink" title="常用的JSTL标签"></a>常用的JSTL标签</h4><ul><li><p><strong>if：相当于java代码的if语句</strong></p><ul><li>属性：<ul><li>test 属性，接受boolean表达式<ul><li>如果表达式为true，则显示  if  标签体内容；如果为false，则不显示标签体内容</li></ul></li><li>一般情况下，test属性值会<strong>结合el表达式一起使用</strong></li></ul></li></ul></li><li><p><strong>注意：</strong></p><ul><li>c：<strong>if  标签没有else情况</strong>，想要else情况，则可以在定义一个c：if标签</li></ul></li></ul><ul><li><p><strong>choose：相当于java代码的switch语句</strong></p><ul><li><p>使用choose标签声明                     相当于switch声明</p></li><li><p>使用when标签做判断                     相当于case</p></li><li><p>使用otherwise标签做其他情况的声明        相当于default</p></li></ul></li></ul><ul><li><p><strong>foreach：相当于java代码的for语句</strong></p><ul><li><p><strong>完成重复的操作</strong></p><ul><li><p>类似C++中的for循环 <code>for(int i=0; i&lt;n; i++) {}</code></p></li><li><p><strong>属性：</strong></p><p>begin：开始值</p><p>end：结束值</p><p><strong>var</strong>：临时变量</p><p>step：步长</p><p>varStatus：循环状态对象</p><p>index：容器中元素的索引，从0开始</p><p>count：循环次数，从1开始</p></li></ul></li><li><p><strong>遍历容器</strong></p><ul><li><p>类似Java中的一种遍历方式 <code>for(User user : list) {}</code></p></li><li><p><strong>属性：</strong></p><p>items：容器对象</p><p><strong>var</strong>：容器中元素的临时变量</p><p>varStatus：循环状态对象</p><p>index：容器中元素的索引，从0开始</p><p>count：循环次数，从1开始</p></li></ul></li></ul></li></ul><h2 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h2><h4 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h4><p>在request域中有一个存有User对象的List集合。需要使用  jstl+el  将list集合数据展示到jsp页面的表格table中</p><h2 id="三层架构：软件设计架构"><a href="#三层架构：软件设计架构" class="headerlink" title="三层架构：软件设计架构"></a>三层架构：软件设计架构</h2><ol><li>界面层(表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互</li><li>业务逻辑层：处理业务逻辑的。</li><li>数据访问层：操作数据存储文件。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JSP入门&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指令&lt;/li&gt;
&lt;li&gt;注释&lt;/l
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>List-04_xml笔记</title>
    <link href="https://chanwillian.github.io/2021/04/05/JavaWeb/List-04-xml%E7%AC%94%E8%AE%B0/"/>
    <id>https://chanwillian.github.io/2021/04/05/JavaWeb/List-04-xml%E7%AC%94%E8%AE%B0/</id>
    <published>2021-04-05T02:40:13.000Z</published>
    <updated>2021-04-05T02:40:57.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><ul><li><strong>XML</strong><ul><li>概念</li><li>语法</li><li>解析</li></ul></li><li>jsoup解析器</li><li>xpath路径语言</li></ul><h2 id="0-1-XML："><a href="#0-1-XML：" class="headerlink" title="0.1 XML："></a>0.1 XML：</h2><ul><li><strong>概念</strong>：Extensible Markup Language 可扩展标记语言</li></ul><ul><li><strong>可扩展</strong>：标签都是自定义的。 <user>  <student></li><li><strong>功能</strong><ul><li>存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ul></li><li><strong>xml与html的区别</strong><ol><li>xml标签都是自定义的，html标签是预定义。</li><li><strong>xml的语法严格，html语法松散</strong></li><li>xml是存储数据的，html是展示数据</li></ol></li><li>w3c：万维网联盟</li></ul><h4 id="1）语法："><a href="#1）语法：" class="headerlink" title="1）语法："></a>1）语法：</h4><ul><li><strong>基本语法</strong>：<ol><li>xml文档的后缀名 .xml</li><li>xml<strong>第一行必须定义为文档声明</strong></li><li>xml文档中<strong>有且仅有一个根标签</strong></li><li>属性值必须使用引号(单双都可)引起来</li><li>标签必须正确关闭</li><li>xml标签名称区分大小写</li></ol></li></ul><ul><li><p><strong>快速入门</strong>：</p><ul><li><pre><code class="xml"><span class="meta">&lt;?xml version='1.0' ?&gt;</span>      <span class="tag">&lt;<span class="name">users</span>&gt;</span>          <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">'1'</span>&gt;</span>              <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span>              <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span>              <span class="tag">&lt;<span class="name">gender</span>&gt;</span>male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span>              <span class="tag">&lt;<span class="name">br</span>/&gt;</span>          <span class="tag">&lt;/<span class="name">user</span>&gt;</span>          <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">'2'</span>&gt;</span>              <span class="tag">&lt;<span class="name">name</span>&gt;</span>lisi<span class="tag">&lt;/<span class="name">name</span>&gt;</span>              <span class="tag">&lt;<span class="name">age</span>&gt;</span>24<span class="tag">&lt;/<span class="name">age</span>&gt;</span>              <span class="tag">&lt;<span class="name">gender</span>&gt;</span>female<span class="tag">&lt;/<span class="name">gender</span>&gt;</span>          <span class="tag">&lt;/<span class="name">user</span>&gt;</span>      <span class="tag">&lt;/<span class="name">users</span>&gt;</span><span class="comment"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">#### 2）组成部分：</span><br><span class="line"></span><br><span class="line">- **文档声明**</span><br><span class="line">  - 格式：&lt;?xml 属性列表 ?&gt;</span><br><span class="line">  - 属性列表：</span><br><span class="line">    - version：版本号，必须的属性</span><br><span class="line">    - encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</span><br><span class="line">    - standalone：是否独立</span><br><span class="line">      - 取值：yes：不依赖其他文件；no：依赖其他文件</span><br><span class="line"></span><br><span class="line">- **指令**(了解)：结合css的</span><br><span class="line">  - &lt;?xml-stylesheet type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;a.css&quot; ?&gt;</span><br><span class="line"></span><br><span class="line">- **标签**：标签名称自定义的</span><br><span class="line">  - **规则**：</span><br><span class="line">    - 名称可以包含字母、数字以及其他的字符 </span><br><span class="line">    - 名称不能以数字或者标点符号开始 </span><br><span class="line">    - 名称不能以字母 xml（或者 XML、Xml 等等）开始 </span><br><span class="line">    - 名称不能包含空格 </span><br><span class="line"></span><br><span class="line">  - 属性：id属性值唯一</span><br><span class="line">  - 文本：</span><br><span class="line">    - CDATA区：在该区域中的数据会被原样展示</span><br><span class="line">    - 格式：  &lt;![CDATA[ 数据 ]]&gt;</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;xml</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;students&gt;</span><br><span class="line">&lt;student number&#x3D;&quot;heima_0001&quot;&gt;</span><br><span class="line">&lt;name id&#x3D;&quot;itcast&quot;&gt;</span><br><span class="line">&lt;xing&gt;张&lt;&#x2F;xing&gt;</span><br><span class="line">&lt;ming&gt;三&lt;&#x2F;ming&gt;</span><br><span class="line">&lt;&#x2F;name&gt;</span><br><span class="line">&lt;age&gt;18&lt;&#x2F;age&gt;</span><br><span class="line">&lt;sex&gt;male&lt;&#x2F;sex&gt;</span><br><span class="line">&lt;&#x2F;student&gt;</span><br><span class="line">&lt;student number&#x3D;&quot;heima_0002&quot;&gt;</span><br><span class="line">&lt;name&gt;jack&lt;&#x2F;name&gt;</span><br><span class="line">&lt;age&gt;18&lt;&#x2F;age&gt;</span><br><span class="line">&lt;sex&gt;female&lt;&#x2F;sex&gt;</span><br><span class="line">&lt;&#x2F;student&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;students&gt;</span><br></pre></td></tr></table></figure></span></code></pre></li></ul></li></ul><h4 id="3）约束："><a href="#3）约束：" class="headerlink" title="3）约束："></a>3）约束：</h4><p><strong>规定xml文档的书写规则</strong></p><ul><li><p><strong>作为框架的使用者</strong>(程序员)：</p><ol><li>能够在xml中引入约束文档</li><li>能够简单的读懂约束文档</li></ol></li><li><p>分类：</p><ol><li><strong>DTD</strong>：一种简单的约束技术</li><li><strong>Schema</strong>：一种复杂的约束技术</li></ol></li></ul><blockquote><h4 id="DTD："><a href="#DTD：" class="headerlink" title="DTD："></a>DTD：</h4></blockquote><ul><li><strong>引入dtd文档到xml文档中</strong><ul><li>内部dtd：将约束规则定义在xml文档中</li><li>外部dtd：将约束的规则定义在外部的dtd文件中<ul><li>本地：<!DOCTYPE 根标签名 SYSTEM "dtd文件的位置"></li><li>网络：<!DOCTYPE 根标签名 PUBLIC "dtd文件名字" "dtd文件的位置URL"></li></ul></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">students</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"student.dtd"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="Schema"><a href="#Schema" class="headerlink" title="Schema:"></a>Schema:</h4></blockquote><ul><li><strong>引入</strong>：<ol><li>填写xml文档的根元素</li><li>引入xsi前缀.  xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;" target="_blank" rel="noopener">http://www.w3.org/2001/XMLSchema-instance&quot;</a></li><li>引入xsd文件命名空间.  xsi:schemaLocation=”<a href="http://www.itcast.cn/xml" target="_blank" rel="noopener">http://www.itcast.cn/xml</a>  student.xsd”</li><li>为每一个xsd约束声明一个前缀,作为标识  xmlns=”<a href="http://www.itcast.cn/xml&quot;" target="_blank" rel="noopener">http://www.itcast.cn/xml&quot;</a> </li></ol></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.itcast.cn/xml"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.itcast.cn/xml  student.xsd"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h4 id="4）解析："><a href="#4）解析：" class="headerlink" title="4）解析："></a>4）解析：</h4><p><strong>操作xml文档，将文档中的数据读取到内存中</strong></p><ul><li><p><strong>操作xml文档</strong></p><ul><li>解析(读取)：将文档中的数据读取到内存中</li><li>写入：将内存中的数据保存到xml文档中。持久化的存储</li></ul></li><li><p><strong>解析xml的方式：</strong></p><ul><li><strong>DOM</strong>：将标记语言文档一次性加载进内存，在内存中形成一颗dom树<ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：占内存</li></ul></li><li><strong>SAX</strong>：逐行读取，基于事件驱动的。<ul><li>优点：不占内存。</li><li>缺点：只能读取，不能增删改</li></ul></li></ul></li></ul><blockquote><h4 id="xml常见的解析器："><a href="#xml常见的解析器：" class="headerlink" title="xml常见的解析器："></a>xml常见的解析器：</h4></blockquote><ol><li><strong>JAXP</strong>：sun公司提供的解析器，支持dom和sax两种思想</li><li><strong>DOM4J</strong>：一款非常优秀的解析器</li><li><strong>Jsoup</strong>：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。<ul><li>它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li></ul></li><li><strong>PULL</strong>：Android操作系统内置的解析器，sax方式的。</li></ol><h2 id="0-2-Jsoup解析器"><a href="#0-2-Jsoup解析器" class="headerlink" title="0.2 Jsoup解析器"></a>0.2 Jsoup解析器</h2><ul><li><strong>概况</strong>：<ul><li><strong>jsoup</strong> 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。</li><li>它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li></ul></li></ul><h4 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h4><ul><li><strong>步骤：</strong><ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.1获取student.xml的path</span></span><br><span class="line">  String path = JsoupDemo1.class.getClassLoader().getResource("student.xml").getPath();</span><br><span class="line">  <span class="comment">//2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span></span><br><span class="line">  Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">  <span class="comment">//3.获取元素对象 Element</span></span><br><span class="line">  Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">  System.out.println(elements.size());  </span><br><span class="line">  <span class="comment">//3.1获取第一个name的Element对象</span></span><br><span class="line">  Element element = elements.get(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">//3.2获取数据</span></span><br><span class="line">  String name = element.text();</span><br><span class="line">  System.out.println(name);</span><br></pre></td></tr></table></figure><h4 id="对象的使用："><a href="#对象的使用：" class="headerlink" title="对象的使用："></a>对象的使用：</h4><blockquote><h4 id="Jsoup："><a href="#Jsoup：" class="headerlink" title="Jsoup："></a>Jsoup：</h4></blockquote><ul><li><strong>工具类</strong>，可以解析html或xml文档，<strong>返回Document</strong></li></ul><ul><li>parse：解析html或xml文档，返回Document<ul><li><strong>parse(File in, String charsetName)</strong>：解析xml或html文件的。</li><li><strong>parse(String html)</strong>：解析xml或html字符串</li><li><strong>parse(URL url, int timeoutMillis)</strong>：通过<strong>网络路径</strong>获取指定的html或xml的文档对象</li></ul></li></ul><blockquote><h4 id="Document："><a href="#Document：" class="headerlink" title="Document："></a>Document：</h4></blockquote><p>文档对象。<strong>代表内存中的dom树</strong></p><ul><li><strong>获取Element对象</strong><ul><li>getElementById(String id)：根据id属性值获取唯一的element对象</li><li>getElementsByTag(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul></li></ul><blockquote><h4 id="Elements："><a href="#Elements：" class="headerlink" title="Elements："></a>Elements：</h4></blockquote><p>元素Element对象的集合。可以当做 ArrayList<Element>来使用</p><blockquote><h4 id="Element：元素对象"><a href="#Element：元素对象" class="headerlink" title="Element：元素对象"></a>Element：元素对象</h4></blockquote><ol><li><p>获取子元素对象</p><ul><li>getElementById(String id)：根据id属性值获取唯一的element对象</li><li>getElementsByTag(String tagName)：根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key)：根据属性名称获取元素对象集合</li><li>getElementsByAttributeValue(String key, String value)：根据对应的属性名和属性值获取元素对象集合</li></ul></li><li><p>获取属性值</p><ul><li>String attr(String key)：根据属性名称获取属性值</li></ul></li><li><p>获取文本内容</p><ul><li>String text():获取文本内容</li><li>String html():获取标签体的所有内容(包括字标签的字符串内容)</li></ul></li></ol><blockquote><h4 id="Node："><a href="#Node：" class="headerlink" title="Node："></a>Node：</h4></blockquote><p>节点对象</p><ul><li>是Document和Element的父类</li></ul><h4 id="快捷查询方式："><a href="#快捷查询方式：" class="headerlink" title="快捷查询方式："></a>快捷查询方式：</h4><p>selector：选择器</p><p>使用的方法：<strong>Elements select​(String cssQuery)</strong></p><p>语法：参考Selector类中定义的语法</p><h2 id="0-3-XPath"><a href="#0-3-XPath" class="headerlink" title="0.3 XPath"></a>0.3 XPath</h2><p>XPath即为XML<strong>路径语言</strong>，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</p><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li>使用Jsoup的Xpath需要额外导入jar包。</li><li>查询w3cshool参考手册，使用xpath的语法完成查询</li><li>代码：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取student.xml的path</span></span><br><span class="line"><span class="built_in">String</span> path = JsoupDemo6.class.getClassLoader().getResource(<span class="string">"student.xml"</span>).getPath();</span><br><span class="line"><span class="comment">//2.获取Document对象</span></span><br><span class="line">Document <span class="built_in">document</span> = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">JXDocument jxDocument = <span class="keyword">new</span> JXDocument(<span class="built_in">document</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.结合xpath语法查询</span></span><br><span class="line"><span class="comment">//4.1查询所有student标签</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">"//student"</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.2查询所有student标签下的name标签</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">"//student/name"</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.3查询student标签下带有id属性的name标签</span></span><br><span class="line">List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">"//student/name[@id]"</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line"><span class="comment">//4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span></span><br><span class="line"></span><br><span class="line">List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">"//student/name[@id='itcast']"</span>);</span><br><span class="line"><span class="keyword">for</span> (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">    System.out.println(jxNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;XML&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;概念&lt;/li&gt;
&lt;li&gt;语法&lt;/li&gt;
&lt;li&gt;解析&lt;
      
    
    </summary>
    
    
      <category term="XML" scheme="https://chanwillian.github.io/categories/XML/"/>
    
    
  </entry>
  
  <entry>
    <title>List-03_BootStrap基础</title>
    <link href="https://chanwillian.github.io/2021/04/05/JavaWeb/JavaScript/List-03-BootStrap%E5%9F%BA%E7%A1%80/"/>
    <id>https://chanwillian.github.io/2021/04/05/JavaWeb/JavaScript/List-03-BootStrap%E5%9F%BA%E7%A1%80/</id>
    <published>2021-04-05T02:17:59.000Z</published>
    <updated>2021-04-05T02:18:56.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h3><ul><li>Bootstrap概况</li><li>Boostrap入门</li><li>Boostrap布局</li><li>Boostrap样式</li></ul><h2 id="01-Bootstrap："><a href="#01-Bootstrap：" class="headerlink" title="01.Bootstrap："></a>01.Bootstrap：</h2><ul><li><p><strong>概念</strong>： 一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。</p><p>Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。</p></li><li><p><strong>框架</strong>:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</p></li><li><p><strong>好处</strong>：</p><ol><li>定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</li><li><strong>响应式布局</strong>。<ul><li>同一套页面可以兼容不同分辨率的设备。</li></ul></li></ol></li></ul><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ol><li>下载Bootstrap</li><li>在项目中将这三个文件夹复制</li><li>创建html页面，引入必要的资源文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"zh-CN"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span><br><span class="line">    &lt;!-- 上述<span class="number">3</span>个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;Bootstrap HelloWorld&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;!-- Bootstrap --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;link href="css/</span>bootstrap.min.css<span class="string">" rel="</span>stylesheet<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>js/jquery<span class="number">-3.2</span><span class="number">.1</span>.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line"><span class="string">    &lt;script src="</span>js/bootstrap.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;你好，世界！&lt;/h1&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="02-响应式布局"><a href="#02-响应式布局" class="headerlink" title="02.响应式布局"></a>02.响应式布局</h2><p><strong>同一套页面可以兼容不同分辨率的设备。</strong></p><ul><li><p><strong>实现</strong>：依赖于栅格系统：<strong>将一行平均分成12个格子，可以指定元素占几个格子</strong></p></li><li><p><strong>步骤</strong>：</p><ol><li><p><strong>定义容器</strong>。相当于之前的table</p><ul><li><strong>容器分类</strong>：<ul><li>container：两边留白</li><li>container-fluid：每一种设备都是100%宽度</li></ul></li></ul></li><li><p><strong>定义行</strong>。相当于之前的 tr   <strong>样式</strong>：row</p></li><li><p><strong>定义元素</strong>。指定该元素在不同的设备上，所占的格子数目。<strong>样式</strong>：col-设备代号-格子数目</p><ul><li>设备代号：<ul><li>xs：超小屏幕 手机 (&lt;768px)：col-xs-12</li><li>sm：小屏幕 平板 (≥768px)</li><li>md：中等屏幕 桌面显示器 (≥992px)</li><li>lg：大屏幕 大桌面显示器 (≥1200px)</li></ul></li></ul></li></ol></li></ul><ul><li><strong>注意</strong>：<ol><li>一行中如果格子<strong>数目超过12</strong>，则超出部分自动换行。</li><li>栅格类属性可以<strong>向上兼容</strong>。栅格类适用于与屏幕宽度<strong>大于或等于分界点大小</strong>的设备。</li><li>如果<strong>真实设备宽度</strong>小于了设置栅格类属性的<strong>设备代码的最小值</strong>，会一个元素沾满一整行。</li></ol></li></ul><h2 id="03-CSS样式和JS插件"><a href="#03-CSS样式和JS插件" class="headerlink" title="03.CSS样式和JS插件"></a>03.CSS样式和JS插件</h2><h3 id="全局CSS样式："><a href="#全局CSS样式：" class="headerlink" title="全局CSS样式："></a>全局CSS样式：</h3><ul><li><p><strong>按钮</strong>：<strong>class=”btn btn-default”</strong></p></li><li><p><strong>图片</strong>：</p><ul><li><p>class=”img-responsive”：图片在任意尺寸都占100%</p></li><li><p>图片形状</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"..."</span> alt=<span class="string">"..."</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-rounded"</span>&gt;：方形</span><br><span class="line">&lt;img src=<span class="string">"..."</span> alt=<span class="string">"..."</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-circle"</span>&gt; ： 圆形</span><br><span class="line">&lt;img src=<span class="string">"..."</span> alt=<span class="string">"..."</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"img-thumbnail"</span>&gt; ：相框</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>表格</strong></p></li></ul><pre><code>* table     * table-bordered       * table-hover</code></pre><ul><li><p>表单</p><ul><li>给表单项添加：class=”form-control” </li></ul></li></ul><ul><li><p>组件：</p><ul><li>导航条</li><li>分页条</li></ul></li><li><p>插件：</p><ul><li>轮播图</li></ul></li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今日内容&quot;&gt;&lt;a href=&quot;#今日内容&quot; class=&quot;headerlink&quot; title=&quot;今日内容&quot;&gt;&lt;/a&gt;今日内容&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Bootstrap概况&lt;/li&gt;
&lt;li&gt;Boostrap入门&lt;/li&gt;
&lt;li&gt;Boostrap布局&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="JS-Boostrap" scheme="https://chanwillian.github.io/categories/JS-Boostrap/"/>
    
    
  </entry>
  
</feed>
